library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
install.packages("dplR", lib="C:/Users/danny.rasch/Documents/R/R-3.4.2/library")
library(shiny) runApp()
library(shiny) runApp()
print("loading app...")
source("global/dependencies.R")
dependencies <- c(
  "data.table",
  "digest",
  "dplyr",
  "dtplyr",
  "dygraphs",
  "ggplot2",
  "jsonlite",
  "lubridate",
  "magrittr",
  "PerformanceAnalytics",
  "R6",
  "rhandsontable",
  "RCurl",
  "RSQLite",
  "scales",
  "shiny",
  "shinythemes",
  "tidyr",
  "XML",
  "xts"
  )
new.packages <- dependencies[!(dependencies %in% installed.packages()[,"Package"])]
if(length(new.packages)>0) install.packages(new.packages)
lapply(dependencies, library, character.only = TRUE)
install.packages("dplyr", lib="C:/Users/danny.rasch/Documents/R/R-3.4.2/library")
source("global/dependencies.R")
source("global/dependencies.R")
source("global/dependencies.R")
source("global/utils.R")
sourceDir("global/futures-data", trace = FALSE)
# init db
db <- Db$new()$singleton$init(localf="local/contracts_data.sqlite", portablef="portable.sqlite")
library(shiny) runApp()
n
s
n
n
n
n
c
db <- Db$new()$singleton$init(localf="local/contracts_data.sqlite", portablef="portable.sqlite")
Db <- R6Class("Db",
  public = list(
    localDBI = NULL,
    localDPL = NULL,
    portableDBI = NULL,
    portableDPL = NULL,
    init = function (localf, portablef) {
      sqlite    <- dbDriver("SQLite")
      dir.create(dirname(localf), showWarnings = FALSE)
      self$localDPL <- src_sqlite(localf, create = TRUE)
      self$localDBI <- dbConnect(sqlite, localf)
      dir.create(dirname(portablef), showWarnings = FALSE)
      self$portableDPL <- src_sqlite(portablef, create = TRUE)
      self$portableDBI <- dbConnect(sqlite, portablef)
      if (!dbExistsTable(self$localDBI, "contracts")) {
        res <- dbSendQuery(self$localDBI, "CREATE TABLE contracts(completeCode text, genericCode text, expDate text, expMonth numeric, expYear numeric, lastFetch text,  data blob,  lastPrice real)")
        dbClearResult(res)
      }
      if (!dbExistsTable(self$portableDBI, "tickers")) {
        res <- dbSendQuery(self$portableDBI, "CREATE TABLE tickers (Name TEXT, Type TEXT, \"IB Ticker\" TEXT PRIMARY KEY, \"Quandl Code\" TEXT, \"Multiplier\" REAL, \"Currency\" TEXT, \"Margin\" REAL, \"RefNum\" TEXT)")
        dbClearResult(res)
      }
      if (!dbExistsTable(self$portableDBI, "rates")) {
        res <- dbSendQuery(self$portableDBI, "CREATE TABLE rates (shortName TEXT primary key, Name TEXT, \"Quandl Code\" TEXT, Type TEXT, Country TEXT, Term TEXT)")
        dbClearResult(res)
      }
      if (!dbExistsTable(self$localDBI, "rates_data")) {
        res <- dbSendQuery(self$localDBI, "CREATE TABLE rates_data(shortName text,  lastFetch text, data blob)")
        dbClearResult(res)
      }
      if (!dbExistsTable(self$portableDBI, "fx")) {
        res <- dbSendQuery(self$portableDBI, "CREATE TABLE fx (shortName text primary key, Name TEXT, \"Quandl Code\" TEXT, codeFrom TEXT, codeTo TEXT)")
        dbClearResult(res)
      }
      if (!dbExistsTable(self$localDBI, "fx_data")) {
        res <- dbSendQuery(self$localDBI, "CREATE TABLE fx_data(shortName text, lastFetch text, data blob)")
        dbClearResult(res)
      }
      if (!dbExistsTable(self$localDBI, "keyval")) {
        res <- dbSendQuery(self$localDBI, "CREATE TABLE keyval (key TEXT PRIMARY KEY, value TEXT)")
        dbClearResult(res)
      }
      if (!dbExistsTable(self$localDBI, "series")) {
        res <- dbSendQuery(self$localDBI, "CREATE TABLE series (key TEXT PRIMARY KEY, data BLOB)")
        dbClearResult(res)
      }
      if (!dbExistsTable(self$portableDBI, "portfolios")) {
        res <- dbSendQuery(self$portableDBI, "CREATE TABLE portfolios(name text primary key, assetClasses text, assets text, strategies text)")
        dbClearResult(res)
      }
      if (!dbExistsTable(self$localDBI, "strats_cache")) {
        res <- dbSendQuery(self$localDBI, "CREATE TABLE strats_cache (Date TEXT, genericCode TEXT, call TEXT, signature TEXT, Position DOUBLE, v1 DOUBLE, v2 DOUBLE, v3 DOUBLE, v4 DOUBLE, v5 DOUBLE)")
        dbClearResult(res)
      }
      self
    },
    writeKey = function (key, value) {
      res <- dbSendQuery(self$localDBI, paste0("INSERT OR REPLACE INTO keyval(key, value) VALUES(\"",key,"\",\"",value,"\")"))
      dbClearResult(res)
    },
    readKey = function (key, default=NULL) {
      quer <- dbSendQuery(self$localDBI, paste0("SELECT * FROM keyval WHERE key=\"",key,"\""))
      res <- fetch(quer)
      dbClearResult(quer)
      if (!is.null(res) && !is.null(res$key) && length(res$key)>0){
        convert <- suppressWarnings(as.numeric(res$value[1], t))
        if (!is.na(convert)) {
          return (convert)
        } else {
          if (res$value[1] == "FALSE") {
            return (FALSE)
          } else if (res$value[1] == "TRUE") {
            return (TRUE)
          } else {
            return (res$value[1])        
          }
        }
      }
      if (!is.null(default)) {
        return (default)
      } else {
        return (NULL)
      }
    },
    writeSeries = function (key, value) {
      insertdata <- data.frame(
        key=key,
        data=I(list(serialize(value, NULL))),
        stringsAsFactors = FALSE
      )
      res <- dbSendPreparedQuery(self$localDBI, "insert or replace into series(key, data) values(?,?)", bind.data=insertdata)
      dbClearResult(quer)
    },
    readSeries = function (key) {
      quer <- dbSendQuery(self$localDBI, paste0("SELECT * FROM series WHERE key=\"",key,"\""))
      res <- fetch(quer)
      dbClearResult(quer)
      data <- NULL
      if (!is.null(res) && !is.null(res$key) && length(res$key)>0){
        data <- unserialize(res$data[[1]])
      }
      data
    }
  ),
  active = list(
    singleton = function() {
      if (is.null(private$senv$sgt)) {
        private$senv$sgt <- Db$new()
      }
      private$senv$sgt
    }),
  private = list(senv = new.env())
)
test = Db(localf = "local/contracts_data.sqlite", portablef = "portable.sqlite")
test = Db$new(localf = "local/contracts_data.sqlite", portablef = "portable.sqlite")
db <- Db$new()$singleton$init(localf="local/contracts_data.sqlite", portablef="portable.sqlite")
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
n
c
n
c
n
c
n
c
n
n
c
n
c
n
c
n
c
n
c
n
c
n
c
n
c
n
c
n
c
n
c
n
c
n
c
n
c
n
s
c
n
c
n
c
n
c
n
c
n
c
n
c
n
c
n
c
n
c
n
c
n
c
n
c
n
c
n
c
n
c
n
c
n
c
n
c
n
c
n
c
n
c
n
c
n
c
n
c
n
c
n
c
n
c
n
c
n
c
library(shiny) runApp()
print("loading app...")
source("global/dependencies.R")
source("config.R")
# utils functions
source("global/utils.R")
sourceDir("global/futures-data", trace = FALSE)
# init db
db <- Db$new()$singleton$init(localf="local/contracts_data.sqlite", portablef="portable.sqlite")
# data source R6 class
futuresData <- FuturesData$new()$singleton
futuresData$load()
ratesData <- RatesData$new()$singleton
futuresData <- FuturesData$new()$singleton
futuresData$load()
ratesData <- RatesData$new()$singleton
futuresData <- FuturesData$new()$singleton
futuresData$load()
print("loading app...")
source("global/dependencies.R")
source("config.R")
# utils functions
source("global/utils.R")
print("loading app...")
source("global/dependencies.R")
source("config.R")
# utils functions
source("global/utils.R")
sourceDir("global/futures-data", trace = FALSE)
# init db
db <- Db$new()$singleton$init(localf="local/contracts_data.sqlite", portablef="portable.sqlite")
# data source R6 class
futuresData <- FuturesData$new()$singleton
futuresData$load()
source("config.R")
# utils functions
source("global/utils.R")
sourceDir("global/futures-data", trace = FALSE)
# init db
db <- Db$new()$singleton$init(localf="local/contracts_data.sqlite", portablef="portable.sqlite")
# data source R6 class
futuresData <- FuturesData$new()$singleton
futuresData$load()
ratesData <- RatesData$new()$singleton
rtvs::debug_source("C:/OneDrive/7_DataScience/02_Visual Studio/2_GitHub/Portfolio_Analytics/Portfolio_Analytics/shiny-futures-master/global.R", encoding = "Windows-1252")
source("config.R")
# utils functions
source("global/utils.R")
sourceDir("global/futures-data", trace = FALSE)
# init db
db <- Db$new()$singleton$init(localf="local/contracts_data.sqlite", portablef="portable.sqlite")
# data source R6 class
futuresData <- FuturesData$new()$singleton
futuresData$load()
ratesData <- RatesData$new()$singleton
futuresData <- FuturesData$new()$singleton
futuresData$load()
db <- Db$new()$singleton$init(localf="local/contracts_data.sqlite", portablef="portable.sqlite")
# data source R6 class
futuresData <- FuturesData$new()$singleton
futuresData$load()
ratesData <- RatesData$new()$singleton
ratesData$load()
fXData <- FXData$new()$singleton
fXData$load()
futuresData <- FuturesData$new()$singleton
futuresData$load()
ratesData <- RatesData$new()$singleton
ratesData$load()
fXData <- FXData$new()$singleton
fXData$load()
library(shiny) runApp()
library(shiny) runApp()
db <- Db$new()$singleton$init(localf="local/contracts_data.sqlite", portablef="portable.sqlite")
# data source R6 class
futuresData <- FuturesData$new()$singleton
futuresData$load()
ratesData <- RatesData$new()$singleton
ratesData$load()
fXData <- FXData$new()$singleton
fXData$load()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
install.packages("shinydashboard", lib="C:/Users/danny.rasch/Documents/R/R-3.4.2/library")
library(shiny) runApp()
library(shiny) runApp()
   set.seed(122)     histdata <- rnorm(500)     output$plot1 <- renderPlot({     data <- histdata[seq_len(input$slider)]     hist(data)          })
    data <- histdata[seq_len(input$slider)]
    set.seed(122)
    histdata <- rnorm(500)
    data <- histdata[seq_len(input$slider)]
    hist(data)
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
source("modules/data.R")
source("modules/gapModule.R")
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
source("global/sidebar.R")
library(shiny) runApp()
library(shiny) runApp()
print("loading app...") source("global/dependencies.R") source("global/sidebar.R") # utils functions #sourceDir("global/futures-data", trace = FALSE) # init db #db <- Db$new()$singleton$init(localf="local/contracts_data.sqlite", portablef="portable.sqlite") # loading modules  sourceDir("modules", trace = FALSE)
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
print("loading app...") source("global/dependencies.R") source("global/sidebar.R") # utils functions #sourceDir("global/futures-data", trace = FALSE) # init db #db <- Db$new()$singleton$init(localf="local/contracts_data.sqlite", portablef="portable.sqlite") # loading modules  sourceDir("modules", trace = FALSE)
library(shiny) runApp()
print("loading app...") source("global/dependencies.R") source("global/sidebar.R") # utils functions #sourceDir("global/futures-data", trace = FALSE) # init db #db <- Db$new()$singleton$init(localf="local/contracts_data.sqlite", portablef="portable.sqlite") # loading modules  sourceDir("modules", trace = FALSE)
library(shiny) runApp()
library(shiny) runApp()
print("loading app...") source("global/dependencies.R") source("global/sidebar.R") # utils functions #sourceDir("global/futures-data", trace = FALSE) # init db #db <- Db$new()$singleton$init(localf="local/contracts_data.sqlite", portablef="portable.sqlite") # loading modules  sourceDir("modules", trace = FALSE)
library(shiny) runApp()
library(shiny) runApp()
print("loading app...") source("global/dependencies.R") source("global/sidebar.R") # utils functions #sourceDir("global/futures-data", trace = FALSE) # init db #db <- Db$new()$singleton$init(localf="local/contracts_data.sqlite", portablef="portable.sqlite") # loading modules  sourceDir("modules", trace = FALSE)
library(shiny) runApp()
print("loading app...") source("global/dependencies.R") source("global/sidebar.R") # utils functions #sourceDir("global/futures-data", trace = FALSE) # init db #db <- Db$new()$singleton$init(localf="local/contracts_data.sqlite", portablef="portable.sqlite") # loading modules  sourceDir("modules", trace = FALSE)
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
diamonds
library(shiny) runApp()
library(shiny) runApp()
n
c
n
s
n
s
s
n
n
source("C:/OneDrive/7_DataScience/02_Visual Studio/2_GitHub/Portfolio_Analytics/Portfolio_Analytics/Portfolio_Scenarios/Scenrio_V0.1.R", echo = TRUE, encoding = "Windows-1252")
library(tidyquant)
library(data.table)
source("C:/OneDrive/7_DataScience/02_Visual Studio/2_GitHub/Portfolio_Analytics/Portfolio_Analytics/Portfolio_Scenarios/Scenrio_V0.1.R", echo = TRUE, encoding = "Windows-1252")
ticker<- c("GDAXI","SSMI","BIO.DE","ZIL2.DE","SIE.DE","IFX.DE","CBK.DE","2PP.F","BAYN.DE","SDF.DE","KBC.DE") 	# Set name for BRK-A to BRK.A 	setSymbolLookup(GDAXI = list(name = "^GDAXI"))
#Ra <- c("AAPL", "GOOG", "NFLX") %>% Ra <- ticker %>%     tq_get(get  = "stock.prices",            from = "2010-01-01",            to   = "2015-12-31") %>%     group_by(symbol) %>%     tq_transmute(select     = adjusted,                   mutate_fun = periodReturn,                   period     = "monthly",                   col_rename = "Ra") Ra 	# Set name for BRK-A to BRK.A 	setSymbolLookup(GDAXI = list(name = "^GDAXI")) 	# Load BRK.A and ATT data 	getSymbols(c("GDAXI")) Rb <- "GDAXI" %>%     tq_get(get  = "stock.prices",            from = "2010-01-01",            to   = "2015-12-31") %>%     tq_transmute(select     = adjusted,                   mutate_fun = periodReturn,                   period     = "monthly",                   col_rename = "Rb") Rb RaRb <- left_join(Ra, Rb, by = c("date" = "date")) RaRb RaRb_capm <- RaRb %>%     tq_performance(Ra = Ra,                     Rb = Rb,                     performance_fun = table.CAPM) RaRb_capm RaRb_capm %>%     select(Alpha, Beta)
# Baseline Returns baseline_returns_monthly <- "GDAXI" %>%     tq_get(get  = "stock.prices",            from = "2013-01-01",             to   = "2016-12-31") %>%            tq_transmute(select     = adjusted,                   mutate_fun = periodReturn,                  period     = "monthly")
returns_joined <- left_join(Quotes_returns_monthly,                              baseline_returns_monthly,                             by = "date") returns_joined returns_joined <- na.omit(returns_joined) Quotes_rolling_corr <- returns_joined %>%     tq_transmute_xy(x          = monthly.returns.x,                      y          = monthly.returns.y,                     mutate_fun = runCor,                     n          = 6,                     col_rename = "rolling.corr.6") #And, we can plot the rolling correlations for the Quotes stocks. Quotes_rolling_corr %>%     ggplot(aes(x = date, y = rolling.corr.6, color = symbol)) +     geom_hline(yintercept = 0, color = palette_light()[[1]]) +     geom_line(size = 1) +     labs(title = "Quotes: Six Month Rolling Correlation to XLK",          x = "", y = "Correlation", color = "") +          facet_wrap(~ symbol, ncol = 2) +          theme_tq() +           scale_color_tq() Quotes <- na.omit(Quotes) ##Example 4: Use TTR MACD to Visualize Moving Average Convergence Divergence Quotes_macd <- Quotes %>%     group_by(symbol) %>%     tq_mutate(select     = close,                mutate_fun = MACD,                nFast      = 12,                nSlow      = 26,                nSig       = 9,                maType     = SMA) %>%               mutate(diff = macd - signal) %>%               select(-(open:volume)) Quotes_macd #And, we can visualize the data like so. Quotes_macd %>%     filter(date >= as_date("2016-10-01")) %>%     ggplot(aes(x = date)) +      geom_hline(yintercept = 0, color = palette_light()[[1]]) +     geom_line(aes(y = macd, col = symbol)) +     geom_line(aes(y = signal), color = "blue", linetype = 2) +     geom_bar(aes(y = diff), stat = "identity", color = palette_light()[[1]]) +     facet_wrap(~ symbol, ncol = 2, scale = "free_y") +     labs(title = "Quotes: Moving Average Convergence Divergence",          y = "MACD", x = "", color = "") +          theme_tq() +          scale_color_tq() Quotes_macd <- Quotes %>%     group_by(symbol) %>%     tq_mutate(select     = close,                mutate_fun = RSI,                n          = 14,                maType     = SMA)  Quotes_macd Quotes_macd %>%     filter(date >= as_date("2016-10-01")) %>%     ggplot(aes(x = date)) +      geom_hline(yintercept = 0, color = palette_light()[[1]]) +     geom_line(aes(y = SMA, col = symbol))
n=3 stock_returns_monthly <- ticker %>%     tq_get(get  = "stock.prices",            from = "2010-01-01",            to   = "2015-12-31") %>%            group_by(symbol) %>%            tq_transmute(select     = adjusted,                   mutate_fun = periodReturn,                   period     = "monthly",                   col_rename = "Ra")
#Second, get baseline asset returns, which is the exact same as Steps 1B and 2B from the Single Portfolio example. #baseline_returns_monthly <- "XLK" %>% baseline_returns_monthly <- "GDAXI" %>%     tq_get(get  = "stock.prices",            from = "2010-01-01",            to   = "2015-12-31") %>%            tq_transmute(select     = adjusted,                   mutate_fun = periodReturn,                   period     = "monthly",                   col_rename = "Rb") stock_returns_monthly_multi <- stock_returns_monthly %>%     tq_repeat_df(n = n) stock_returns_monthly_multi
weights <- c(     0.50, 0.25, 0.25,      0.50, 0.4, 0.1,      0.50, 0.4, 0.1 ) stocks <- ticker[1:3] weights_table <-  tibble(stocks) %>%     tq_repeat_df(n = n) %>%     bind_cols(tibble(weights)) %>%     group_by(portfolio) weights_table
portfolio_returns_monthly_multi <- stock_returns_monthly_multi %>%     tq_portfolio(assets_col  = symbol,                   returns_col = Ra,                   weights     = weights_table,                   col_rename  = "Ra") portfolio_returns_monthly_multi RaRb_multiple_portfolio <- left_join(portfolio_returns_monthly_multi,                                       baseline_returns_monthly,                                      by = "date") RaRb_multiple_portfolio
RaRb_multiple_portfolio %>%     tq_performance(Ra = Ra, Rb = Rb, performance_fun = table.CAPM)
CAPM=RaRb_multiple_portfolio %>%     tq_performance(Ra = Ra, Rb = Rb, performance_fun = table.CAPM)
SR=RaRb_multiple_portfolio %>%     tq_performance(Ra = Ra, Rb = NULL, performance_fun = SharpeRatio)
P_CAPM=RaRb_multiple_portfolio %>%     tq_performance(Ra = Ra, Rb = Rb, performance_fun = table.CAPM)
P_SR=RaRb_multiple_portfolio %>%     tq_performance(Ra = Ra, Rb = NULL, performance_fun = SharpeRatio)
P_VaR <- RaRb_multiple_portfolio %>%     tq_performance(Ra = Ra, Rb = NULL, performance_fun = VaR)
tq_performance_fun_options()
RaRb_multiple_portfolio %>%     tq_performance(Ra = Ra, Rb = NULL, performance_fun = CAPM.RiskPremium)
RaRb_multiple_portfolio %>%     tq_performance(Ra = Ra, Rb = NULL, performance_fun = table.Stats)
P_Stats<-RaRb_multiple_portfolio %>%     tq_performance(Ra = Ra, Rb = NULL, performance_fun = table.Stats)
source("C:/OneDrive/7_DataScience/02_Visual Studio/2_GitHub/Portfolio_Analytics/Portfolio_Analytics/Portfolio_Scenarios/LoadQuotes.R", encoding = "Windows-1252")
 Quotes_annual_returns <- Quotes %>%     group_by(symbol) %>%     tq_transmute(select     = adjusted,                   mutate_fun = periodReturn,                   period     = "yearly",                   type       = "arithmetic") Quotes_annual_returns Quotes_annual_returns %>%     ggplot(aes(x = date, y = yearly.returns, fill = symbol)) +     geom_bar(stat = "identity") +     geom_hline(yintercept = 0, color = palette_light()[[1]]) +     scale_y_continuous(labels = scales::percent) +     labs(title = "Quotes: Annual Returns",          subtitle = "Get annual returns quickly with tq_transmute!",          y = "Annual Returns", x = "") +           facet_wrap(~ symbol, ncol = 2) +          theme_tq() +           scale_fill_tq()
uotes_daily_log_returns <- Quotes %>%     group_by(symbol) %>%     tq_transmute(select     = adjusted,                   mutate_fun = periodReturn,                   period     = "daily",                   type       = "log",                  col_rename = "monthly.returns") Quotes_daily_log_returns %>%     ggplot(aes(x = monthly.returns, fill = symbol)) +     geom_density(alpha = 0.5) +     labs(title = "Quotes: Charting the Daily Log Returns",          x = "Monthly Returns", y = "Density") +          theme_tq() +          scale_fill_tq() +           facet_wrap(~ symbol, ncol = 2)
source("C:/OneDrive/7_DataScience/02_Visual Studio/2_GitHub/Portfolio_Analytics/Portfolio_Analytics/Portfolio_Scenarios/SingleAssets_V0.1.R", echo = TRUE, encoding = "Windows-1252")
stock_returns_monthly=Quotes_returns_monthly
baseline_returns_monthly <- "GDAXI" %>%     tq_get(get  = "stock.prices",            from = "2010-01-01",            to   = "2015-12-31") %>%            tq_transmute(select     = adjusted,                   mutate_fun = periodReturn,                   period     = "monthly",                   col_rename = "Rb")
stock_returns_monthly_multi <- stock_returns_monthly %>%     tq_repeat_df(n = n) stock_returns_monthly_multi
weights <- c(     0.50, 0.25, 0.25,      0.50, 0.4, 0.1,      0.50, 0.4, 0.1 ) stocks <- ticker[1:3] weights_table <-  tibble(stocks) %>%     tq_repeat_df(n = n) %>%     bind_cols(tibble(weights)) %>%     group_by(portfolio) weights_table
portfolio_returns_monthly_multi <- stock_returns_monthly_multi %>%     tq_portfolio(assets_col  = symbol,                   returns_col = Ra,                   weights     = weights_table,                   col_rename  = "Ra") portfolio_returns_monthly_multi
RaRb_multiple_portfolio <- left_join(portfolio_returns_monthly_multi,                                       baseline_returns_monthly,                                      by = "date") RaRb_multiple_portfolio
RaRb_multiple_portfolio <- left_join(portfolio_returns_monthly_multi,                                       baseline_returns_monthly,                                      by = "date") RaRb_multiple_portfolio
RaRb_multiple_portfolio <- left_join(portfolio_returns_monthly_multi,                                       baseline_returns_monthly,                                      by = "date") RaRb_multiple_portfolio
ticker <- c("GDAXI","SSMI","BIO.DE","ZIL2.DE",     "SIE.DE","IFX.DE","CBK.DE","2PP.F","BAYN.DE","SDF.DE","KBC.DE")
AllocationCurrent = read.table("AllocationCurrent.csv", sep = ",")
AllocationCurrent = read.table("AllocationCurrent.csv", sep = ",")
ticker <- as.vector(AllocationCurrent$Symbol)
AllocationCurrent = read.table("AllocationCurrent.csv", sep = ",")
ticker <- as.vector(AllocationCurrent$Symbol)
source("C:/OneDrive/7_DataScience/02_Visual Studio/2_GitHub/Portfolio_Analytics/Portfolio_Analytics/Portfolio_Scenarios/Portfolio_V0.1.R", echo = TRUE, encoding = "Windows-1252")
baseline_returns_monthly <- "GDAXI" %>%     tq_get(get  = "stock.prices",            from = "2010-01-01",            to   = "2015-12-31") %>%            tq_transmute(select     = adjusted,                   mutate_fun = periodReturn,                   period     = "monthly",                   col_rename = "Rb")
AllocationCurrent = read.table("AllocationCurrent.csv", sep = ",")
ticker <- as.vector(AllocationCurrent$Symbol)
(ticker <- as.vector(AllocationCurrent$Symbol))
AllocationCurrent = read.table("AllocationCurrent.csv", sep = ",")
(ticker <- as.vector(AllocationCurrent$Symbol))
AllocationCurrent = read.table("AllocationCurrent.csv", sep = ",")
AllocationCurrent = read.table("AllocationCurrent.csv", sep = ",")
AllocationCurrent = read.table("AllocationCurrent.csv", sep = ";")
AllocationCurrent = read.table("AllocationCurrent.csv", sep = ";")
AllocationCurrent = read.table("AllocationCurrent.csv", sep = "")
AllocationCurrent = read.table("AllocationCurrent.csv", sep = ",")
AllocationCurrent = read.table("AllocationCurrent.csv", sep = " ")
AllocationCurrent = read.table("AllocationCurrent.csv", sep = "")
AllocationCurrent = read.table("AllocationCurrent.csv", sep = ",")
AllocationCurrent = read.table("AllocationCurrent.csv")
AllocationCurrent = read.table("AllocationCurrent.csv")
(ticker <- as.vector(AllocationCurrent$Symbol))
AllocationCurrent = read.csv("AllocationCurrent.csv")
AllocationCurrent = read.csv("AllocationCurrent.csv",sep",")
AllocationCurrent = read.csv("AllocationCurrent.csv", sep=",")
AllocationCurrent = read.csv("AllocationCurrent.csv", sep(","))
AllocationCurrent = read.csv("AllocationCurrent.csv", sep=",")
AllocationCurrent = read.csv("AllocationCurrent.csv", sep=";")
AllocationCurrent = read.csv("AllocationCurrent.csv", sep="")
ticker <- c("2PP.F", "BAYN.DE", "SIE.DE")
source("C:/OneDrive/7_DataScience/02_Visual Studio/2_GitHub/Portfolio_Analytics/Portfolio_Analytics/Portfolio_Scenarios/SingleAssets_V0.1.R", echo = TRUE, encoding = "Windows-1252")
Quotes_annual_returns <- Quotes %>%     group_by(symbol) %>%     tq_transmute(select     = adjusted,                   mutate_fun = periodReturn,                   period     = "yearly",                   type       = "arithmetic") Quotes_annual_returns
Quotes_annual_returns %>%     ggplot(aes(x = date, y = yearly.returns, fill = symbol)) +     geom_bar(stat = "identity") +     geom_hline(yintercept = 0, color = palette_light()[[1]]) +     scale_y_continuous(labels = scales::percent) +     labs(title = "Quotes: Annual Returns",          subtitle = "Get annual returns quickly with tq_transmute!",          y = "Annual Returns", x = "") +           facet_wrap(~ symbol, ncol = 2) +          theme_tq() +           scale_fill_tq()
Quotes <- fread("C:/OneDrive/PowerBI_test/Portfolio_Slicer/Input/Quotes_detail.csv")
Quotes$date = as.Date(Quotes$date)
source("C:/OneDrive/7_DataScience/02_Visual Studio/2_GitHub/Portfolio_Analytics/Portfolio_Analytics/Portfolio_Scenarios/Portfolio_V0.1.R", echo = TRUE, encoding = "Windows-1252")
source("C:/OneDrive/7_DataScience/02_Visual Studio/2_GitHub/Portfolio_Analytics/Portfolio_Analytics/Portfolio_Scenarios/SingleAssets_V0.1.R", echo = TRUE, encoding = "Windows-1252")
stock_returns_monthly=Quotes_returns_monthly
#Second, get baseline asset returns, which is the exact same as Steps 1B and 2B from the Single Portfolio example. #baseline_returns_monthly <- "XLK" %>% baseline_returns_monthly <- "GDAXI" %>%     tq_get(get  = "stock.prices",            from = "2010-01-01",            to   = "2015-12-31") %>%            tq_transmute(select     = adjusted,                   mutate_fun = periodReturn,                   period     = "monthly",                   col_rename = "Rb")
baseline_returns_monthly <- "GDAXI" %>%     tq_get(get  = "stock.prices",            from = "2013-01-01",             to   = "2016-12-31") %>%            tq_transmute(select     = adjusted,                   mutate_fun = periodReturn,                  period     = "monthly")
baseline_returns_monthly
stock_returns_monthly_multi <- stock_returns_monthly %>%     tq_repeat_df(n = n) stock_returns_monthly_multi
weights <- c(     0.50, 0.25, 0.25,      0.50, 0.4, 0.1,      0.50, 0.4, 0.1 ) stocks <- ticker[1:3] weights_table <-  tibble(stocks) %>%     tq_repeat_df(n = n) %>%     bind_cols(tibble(weights)) %>%     group_by(portfolio) weights_table
portfolio_returns_monthly_multi <- stock_returns_monthly_multi %>%     tq_portfolio(assets_col  = symbol,                   returns_col = Ra,                   weights     = weights_table,                   col_rename  = "Ra") portfolio_returns_monthly_multi RaRb_multiple_portfolio <- left_join(portfolio_returns_monthly_multi,                                       baseline_returns_monthly,                                      by = "date") RaRb_multiple_portfolio P_CAPM=RaRb_multiple_portfolio %>%     tq_performance(Ra = Ra, Rb = Rb, performance_fun = table.CAPM)
baseline_returns_monthly <- "GDAXI" %>%     tq_get(get  = "stock.prices",            from = "2013-01-01",             to   = "2016-12-31") %>%            tq_transmute(select     = adjusted,                   mutate_fun = periodReturn,                  period = "monthly",                  col_rename = "Rb")
 stock_returns_monthly_multi <- stock_returns_monthly %>%     tq_repeat_df(n = n) stock_returns_monthly_multi weights <- c(     0.50, 0.25, 0.25,      0.50, 0.4, 0.1,      0.50, 0.4, 0.1 ) stocks <- ticker[1:3] weights_table <-  tibble(stocks) %>%     tq_repeat_df(n = n) %>%     bind_cols(tibble(weights)) %>%     group_by(portfolio) weights_table portfolio_returns_monthly_multi <- stock_returns_monthly_multi %>%     tq_portfolio(assets_col  = symbol,                   returns_col = Ra,                   weights     = weights_table,                   col_rename  = "Ra") portfolio_returns_monthly_multi RaRb_multiple_portfolio <- left_join(portfolio_returns_monthly_multi,                                       baseline_returns_monthly,                                      by = "date") RaRb_multiple_portfolio P_CAPM=RaRb_multiple_portfolio %>%     tq_performance(Ra = Ra, Rb = Rb, performance_fun = table.CAPM)
library(ggplot2) args(Return.portfolio) wts_map <- tibble(     symbols = c(ticker[1:2]),     weights = c(0.5, 0.5) ) wts_map
library(ggplot2)
args(Return.portfolio)
wts_map <- tibble(     symbols = c(ticker[1:2]),     weights = c(0.5, 0.5) )
wts_map
portfolio_returns_monthly <- stock_returns_monthly %>%     tq_portfolio(assets_col  = symbol,                   returns_col = Ra,                   weights     = wts_map,                   col_rename  = "Ra")
portfolio_returns_monthly %>%     ggplot(aes(x = date, y = Ra)) +     geom_bar(stat = "identity", fill = palette_light()[[1]]) +     labs(title = "Portfolio Returns",          subtitle = "50% AAPL, 0% GOOG, and 50% NFLX",          caption = "Shows an above-zero trend meaning positive returns",          x = "", y = "Monthly Returns") +     geom_smooth(method = "lm") +     theme_tq() +     scale_color_tq() +     scale_y_continuous(labels = scales::percent)
portfolio_returns_monthly <- stock_returns_monthly %>%     tq_portfolio(assets_col  = symbol,                   returns_col = Ra,                   weights     = wts_map,                   col_rename = "Ra")
portfolio_returns_monthly <- stock_returns_monthly %>%     tq_portfolio(assets_col  = symbol,                   returns_col = Ra,                   weights     = wts_map,                   col_rename = "Ra")
wts_map <- tibble(     symbols = c(ticker[1:2]),     weights = c(0.5, 0.5) ) wts_map
portfolio_returns_monthly <- Ra %>%     tq_portfolio(assets_col = symbol,                  returns_col = Ra,                  weights = wts_map,                  col_rename = "Ra")
portfolio_returns_monthly %>%     ggplot(aes(x = date, y = Ra)) +     geom_bar(stat = "identity", fill = palette_light()[[1]]) +     labs(title = "Portfolio Returns",          subtitle = "50% AAPL, 0% GOOG, and 50% NFLX",          caption = "Shows an above-zero trend meaning positive returns",          x = "", y = "Monthly Returns") +     geom_smooth(method = "lm") +     theme_tq() +     scale_color_tq() +     scale_y_continuous(labels = scales::percent)
portfolio_growth_monthly <- stock_returns_monthly %>%     tq_portfolio(assets_col   = symbol,                   returns_col  = Ra,                   weights      = wts_map,                   col_rename   = "investment.growth",                  wealth.index = TRUE) %>%     mutate(investment.growth = investment.growth * 10000) portfolio_growth_monthly %>%     ggplot(aes(x = date, y = investment.growth)) +     geom_line(size = 2, color = palette_light()[[1]]) +     labs(title = "Portfolio Growth",          subtitle = "50% AAPL, 0% GOOG, and 50% NFLX",          caption = "Now we can really visualize performance!",          x = "", y = "Portfolio Value") +     geom_smooth(method = "loess") +     theme_tq() +     scale_color_tq() +     scale_y_continuous(labels = scales::dollar)
portfolio_growth_monthly <- stock_returns_monthly %>%     tq_portfolio(assets_col   = symbol,                   returns_col  = Ra,                   weights      = wts_map,                   col_rename   = "investment.growth",                  wealth.index = TRUE) %>%     mutate(investment.growth = investment.growth * 10000)
portfolio_growth_monthly <- Ra %>%     tq_portfolio(assets_col   = symbol,                   returns_col  = Ra,                   weights      = wts_map,                   col_rename   = "investment.growth",                  wealth.index = TRUE) %>%                  mutate(investment.growth = investment.growth * 10000)
Quotes_returns_monthly <- Quotes %>%     group_by(symbol) %>%     tq_transmute(select     = adjusted,                   mutate_fun = periodReturn,                  period = "monthly",                  col_rename = "Ra")
stock_returns_monthly=Quotes_returns_monthly
portfolio_growth_monthly <- stock_returns_monthly %>%     tq_portfolio(assets_col   = symbol,                   returns_col  = Ra,                   weights      = wts_map,                   col_rename   = "investment.growth",                  wealth.index = TRUE) %>%                  mutate(investment.growth = investment.growth * 10000)
portfolio_returns_monthly <- stock_returns_monthly %>%     tq_portfolio(assets_col  = symbol,                   returns_col = Ra,                   weights     = wts_map,                   col_rename = "Ra")
portfolio_growth_monthly %>%     ggplot(aes(x = date, y = investment.growth)) +     geom_line(size = 2, color = palette_light()[[1]]) +     labs(title = "Portfolio Growth",          subtitle = "50% AAPL, 0% GOOG, and 50% NFLX",          caption = "Now we can really visualize performance!",          x = "", y = "Portfolio Value") +     geom_smooth(method = "loess") +     theme_tq() +     scale_color_tq() +     scale_y_continuous(labels = scales::dollar)
portfolio_growth_monthly_multi <- stock_returns_monthly_multi %>%     tq_portfolio(assets_col   = symbol,                   returns_col  = Ra,                   weights      = weights_table,                   col_rename   = "investment.growth",                  wealth.index = TRUE) %>%     mutate(investment.growth = investment.growth * 10000) portfolio_growth_monthly_multi %>%     ggplot(aes(x = date, y = investment.growth, color = factor(portfolio))) +     geom_line(size = 2) +     labs(title = "Portfolio Growth",          subtitle = "Comparing Multiple Portfolios",          caption = "Portfolio 3 is a Standout!",          x = "", y = "Portfolio Value",          color = "Portfolio") +     geom_smooth(method = "loess") +     theme_tq() +     scale_color_tq() +     scale_y_continuous(labels = scales::dollar) ``` ## Customizing tq_performance ```{r} args(SharpeRatio) RaRb_multiple_portfolio %>%     tq_performance(Ra              = Ra,                     performance_fun = SharpeRatio) RaRb_multiple_portfolio %>%     tq_performance(Ra              = Ra,                     performance_fun = SharpeRatio,                    Rf              = 0.03 / 12)
portfolio_growth_monthly_multi <- stock_returns_monthly_multi %>%     tq_portfolio(assets_col   = symbol,                   returns_col  = Ra,                   weights      = weights_table,                   col_rename   = "investment.growth",                  wealth.index = TRUE) %>%     mutate(investment.growth = investment.growth * 10000)
portfolio_returns_monthly_multi <- stock_returns_monthly_multi %>%     tq_portfolio(assets_col  = symbol,                   returns_col = Ra,                   weights     = weights_table,                   col_rename  = "Ra") portfolio_returns_monthly_multi
stock_returns_monthly_multi <- stock_returns_monthly %>%     tq_repeat_df(n = n) stock_returns_monthly_multi
portfolio_growth_monthly_multi <- stock_returns_monthly_multi %>%     tq_portfolio(assets_col   = symbol,                   returns_col  = Ra,                   weights      = weights_table,                   col_rename   = "investment.growth",                  wealth.index = TRUE) %>%     mutate(investment.growth = investment.growth * 10000)
portfolio_growth_monthly_multi %>%     ggplot(aes(x = date, y = investment.growth, color = factor(portfolio))) +     geom_line(size = 2) +     labs(title = "Portfolio Growth",          subtitle = "Comparing Multiple Portfolios",          caption = "Portfolio 3 is a Standout!",          x = "", y = "Portfolio Value",          color = "Portfolio") +     geom_smooth(method = "loess") +     theme_tq() +     scale_color_tq() +     scale_y_continuous(labels = scales::dollar)
args(SharpeRatio) RaRb_multiple_portfolio %>%     tq_performance(Ra              = Ra,                     performance_fun = SharpeRatio) RaRb_multiple_portfolio %>%     tq_performance(Ra              = Ra,                     performance_fun = SharpeRatio,                    Rf              = 0.03 / 12)
source("C:/OneDrive/7_DataScience/02_Visual Studio/2_GitHub/Portfolio_Analytics/Portfolio_Analytics/Portfolio_Scenarios/LoadQuotes.R", echo = TRUE, encoding = "Windows-1252")
source("C:/OneDrive/7_DataScience/02_Visual Studio/2_GitHub/Portfolio_Analytics/Portfolio_Analytics/Portfolio_Scenarios/SingleAssets_V0.1.R", echo = TRUE, encoding = "Windows-1252")
source("C:/OneDrive/7_DataScience/02_Visual Studio/2_GitHub/Portfolio_Analytics/Portfolio_Analytics/Portfolio_Scenarios/LoadQuotes.R", echo = TRUE, encoding = "Windows-1252")
source("C:/OneDrive/7_DataScience/02_Visual Studio/2_GitHub/Portfolio_Analytics/Portfolio_Analytics/Portfolio_Scenarios/LoadQuotes.R", echo = TRUE, encoding = "Windows-1252")
source("C:/OneDrive/7_DataScience/02_Visual Studio/2_GitHub/Portfolio_Analytics/Portfolio_Analytics/Portfolio_Scenarios/LoadQuotes.R", echo = TRUE, encoding = "Windows-1252")
source("C:/OneDrive/7_DataScience/02_Visual Studio/2_GitHub/Portfolio_Analytics/Portfolio_Analytics/Portfolio_Scenarios/SingleAssets_V0.1.R", echo = TRUE, encoding = "Windows-1252")
Quotes_macd <- Quotes %>%     group_by(symbol) %>%     tq_mutate(select     = close,                mutate_fun = MACD,                nFast      = 12,                nSlow      = 26,                nSig       = 9,                maType     = SMA) %>%               mutate(diff = macd - signal) %>%               select(-(open:volume)) Quotes_macd
Quotes_rolling_corr %>%     ggplot(aes(x = date, y = rolling.corr.6, color = symbol)) +     geom_hline(yintercept = 0, color = palette_light()[[1]]) +     geom_line(size = 1) +     labs(title = "Quotes: Six Month Rolling Correlation to XLK",          x = "", y = "Correlation", color = "") +          facet_wrap(~ symbol, ncol = 2) +          theme_tq() +           scale_color_tq() Quotes <- na.omit(Quotes)
baseline_returns_monthly <- "GDAXI" %>%     tq_get(get  = "stock.prices",            from = "2013-01-01",             to   = "2016-12-31") %>%            tq_transmute(select     = adjusted,                   mutate_fun = periodReturn,                  period = "monthly",                  col_rename = "Rb")
baseline_returns_monthly <- "GDAXI" %>%     tq_get(get  = "stock.prices",            from = "2013-01-01",             to   = "2016-12-31") %>%            tq_transmute(select     = adjusted,                   mutate_fun = periodReturn,                  period = "monthly")
baseline_returns_monthly <- "GDAXI" %>%     tq_get(get  = "stock.prices",            from = "2010-01-01",           to   = "2015-12-31") %>%          tq_transmute(select     = adjusted,                mutate_fun = periodReturn,              period     = "monthly",             col_rename = "Rb")
baseline_returns_monthly <- "XLK" %>%     tq_get(get  = "stock.prices",            from = "2013-01-01",             to   = "2016-12-31") %>%            tq_transmute(select     = adjusted,                   mutate_fun = periodReturn,                  period = "monthly")
baseline_returns_monthly <- "XLK" %>%     tq_get(get  = "stock.prices",            from = "2013-01-01",             to   = "2016-12-31") %>%            tq_transmute(select     = adjusted,                   mutate_fun = periodReturn,                  period = "monthly",                  col_rename = "Rb")
baseline_returns_monthly <- "GADXI" %>%     tq_get(get = "stock.prices",            from = "2013-01-01",            to = "2016-12-31") %>%            tq_transmute(select = adjusted,                  mutate_fun = periodReturn,                  period = "monthly",                  col_rename = "Rb")
baseline_returns_monthly <- "GADXI" %>%     tq_get(get = "stock.prices",            from = "2013-01-01",            to = "2016-12-31") %>%            tq_transmute(select = adjusted,                  mutate_fun = periodReturn,                  period = "monthly",                  col_rename = "Rb")
getSymbols(c("GDAXI"))
baseline_returns_monthly <- "XLK" %>%     tq_get(get  = "stock.prices",            from = "2013-01-01",             to   = "2016-12-31") %>%            tq_transmute(select     = adjusted,                   mutate_fun = periodReturn,                  period = "monthly",                  col_rename = "Rb")
returns_joined <- left_join(Quotes_returns_monthly,                              baseline_returns_monthly,                             by = "date") returns_joined returns_joined <- na.omit(returns_joined) Quotes_rolling_corr <- returns_joined %>%     tq_transmute_xy(x          = monthly.returns.x,                      y          = monthly.returns.y,                     mutate_fun = runCor,                     n          = 6,                     col_rename = "rolling.corr.6")
baseline_returns_monthly <- "XLK" %>%     tq_get(get  = "stock.prices",            from = "2013-01-01",             to   = "2017-11-01") %>%            tq_transmute(select     = adjusted,                   mutate_fun = periodReturn,                  period = "monthly",                  col_rename = "Rb")
returns_joined <- left_join(Quotes_returns_monthly,                              baseline_returns_monthly,                             by = "date") returns_joined returns_joined <- na.omit(returns_joined)
baseline_returns_monthly <- "XLK" %>%     tq_get(get  = "stock.prices",            from = "2007-01-01",             to   = "2017-11-01") %>%            tq_transmute(select     = adjusted,                   mutate_fun = periodReturn,                  period = "monthly",                  col_rename = "Rb")
returns_joined <- left_join(Quotes_returns_monthly,                              baseline_returns_monthly,                             by = "date") returns_joined returns_joined <- na.omit(returns_joined)
Quotes_rolling_corr <- returns_joined %>%     tq_transmute_xy(x          = monthly.returns.x,                      y          = monthly.returns.y,                     mutate_fun = runCor,                     n          = 6,                     col_rename = "rolling.corr.6") #And, we can plot the rolling correlations for the Quotes stocks.
Quotes_rolling_corr <- returns_joined %>%     tq_transmute_xy(x          = monthly.returns.x,                      y          = monthly.returns.y,                     mutate_fun = runCor,                     n          = 6,                     col_rename = "rolling.corr.6")
baseline_returns_monthly <- "XLK" %>%     tq_get(get  = "stock.prices",            from = "2007-01-01",             to   = "2017-11-01") %>%            tq_transmute(select     = adjusted,                   mutate_fun = periodReturn,                  period = "monthly")
# Asset Returns Quotes_returns_monthly <- Quotes %>%     group_by(symbol) %>%     tq_transmute(select     = adjusted,                   mutate_fun = periodReturn,                  period = "monthly")
returns_joined <- left_join(Quotes_returns_monthly,                              baseline_returns_monthly,                             by = "date") returns_joined returns_joined <- na.omit(returns_joined)
Quotes_rolling_corr <- returns_joined %>%     tq_transmute_xy(x          = monthly.returns.x,                      y          = monthly.returns.y,                     mutate_fun = runCor,                     n          = 6,                     col_rename = "rolling.corr.6")
# Asset Returns Quotes_returns_monthly <- Quotes %>%     group_by(symbol) %>%     tq_transmute(select     = adjusted,                   mutate_fun = periodReturn,                  period = "monthly",                  col_rename = "Ra")
baseline_returns_monthly <- "XLK" %>%     tq_get(get  = "stock.prices",            from = "2007-01-01",             to   = "2017-11-01") %>%            tq_transmute(select     = adjusted,                   mutate_fun = periodReturn,                  period = "monthly",                  col_rename = "Rb")
returns_joined <- left_join(Quotes_returns_monthly,                              baseline_returns_monthly,                             by = "date") returns_joined returns_joined <- na.omit(returns_joined)
Quotes_rolling_corr <- returns_joined %>%     tq_transmute_xy(x          = Ra,                      y          = Rb,                     mutate_fun = runCor,                     n          = 6,                     col_rename = "rolling.corr.6")
Quotes_rolling_corr %>%     ggplot(aes(x = date, y = rolling.corr.6, color = symbol)) +     geom_hline(yintercept = 0, color = palette_light()[[1]]) +     geom_line(size = 1) +     labs(title = "Quotes: Six Month Rolling Correlation to XLK",          x = "", y = "Correlation", color = "") +          facet_wrap(~ symbol, ncol = 2) +          theme_tq() +           scale_color_tq() Quotes <- na.omit(Quotes)
Quotes_macd <- Quotes %>%     group_by(symbol) %>%     tq_mutate(select     = close,                mutate_fun = MACD,                nFast      = 12,                nSlow      = 26,                nSig       = 9,                maType     = SMA) %>%               mutate(diff = macd - signal) %>%               select(-(open:volume)) Quotes_macd
Quotes_macd %>%     filter(date >= as_date("2016-10-01")) %>%     ggplot(aes(x = date)) +      geom_hline(yintercept = 0, color = palette_light()[[1]]) +     geom_line(aes(y = macd, col = symbol)) +     geom_line(aes(y = signal), color = "blue", linetype = 2) +     geom_bar(aes(y = diff), stat = "identity", color = palette_light()[[1]]) +     facet_wrap(~ symbol, ncol = 2, scale = "free_y") +     labs(title = "Quotes: Moving Average Convergence Divergence",          y = "MACD", x = "", color = "") +          theme_tq() +          scale_color_tq()
Quotes_macd <- Quotes %>%     group_by(symbol) %>%     tq_mutate(select     = close,                mutate_fun = RSI,                n          = 14,                maType     = SMA)  Quotes_macd Quotes_macd %>%     filter(date >= as_date("2016-10-01")) %>%     ggplot(aes(x = date)) +      geom_hline(yintercept = 0, color = palette_light()[[1]]) +     geom_line(aes(y = SMA, col = symbol))
source("C:/OneDrive/7_DataScience/02_Visual Studio/2_GitHub/Portfolio_Analytics/Portfolio_Analytics/Portfolio_Scenarios/Portfolio_V0.1.R", echo = TRUE, encoding = "Windows-1252")
library(ggplot2) args(Return.portfolio) wts_map <- tibble(     symbols = c(ticker[1:2]),     weights = c(0.5, 0.5) ) wts_map wts_map <- tibble(     symbols = c(ticker[1:2]),     weights = c(0.5, 0.5) ) wts_map portfolio_returns_monthly <- stock_returns_monthly %>%     tq_portfolio(assets_col  = symbol,                   returns_col = Ra,                   weights     = wts_map,                   col_rename = "Ra") portfolio_returns_monthly %>%     ggplot(aes(x = date, y = Ra)) +     geom_bar(stat = "identity", fill = palette_light()[[1]]) +     labs(title = "Portfolio Returns",          subtitle = "50% AAPL, 0% GOOG, and 50% NFLX",          caption = "Shows an above-zero trend meaning positive returns",          x = "", y = "Monthly Returns") +     geom_smooth(method = "lm") +     theme_tq() +     scale_color_tq() +     scale_y_continuous(labels = scales::percent) #Custom portfolio_growth_monthly <- stock_returns_monthly %>%     tq_portfolio(assets_col   = symbol,                   returns_col  = Ra,                   weights      = wts_map,                   col_rename   = "investment.growth",                  wealth.index = TRUE) %>%                  mutate(investment.growth = investment.growth * 10000) portfolio_growth_monthly %>%     ggplot(aes(x = date, y = investment.growth)) +     geom_line(size = 2, color = palette_light()[[1]]) +     labs(title = "Portfolio Growth",          subtitle = "50% AAPL, 0% GOOG, and 50% NFLX",          caption = "Now we can really visualize performance!",          x = "", y = "Portfolio Value") +     geom_smooth(method = "loess") +     theme_tq() +     scale_color_tq() +     scale_y_continuous(labels = scales::dollar) # Multiple Portfolios portfolio_growth_monthly_multi <- stock_returns_monthly_multi %>%     tq_portfolio(assets_col   = symbol,                   returns_col  = Ra,                   weights      = weights_table,                   col_rename   = "investment.growth",                  wealth.index = TRUE) %>%     mutate(investment.growth = investment.growth * 10000) portfolio_growth_monthly_multi %>%     ggplot(aes(x = date, y = investment.growth, color = factor(portfolio))) +     geom_line(size = 2) +     labs(title = "Portfolio Growth",          subtitle = "Comparing Multiple Portfolios",          caption = "Portfolio 3 is a Standout!",          x = "", y = "Portfolio Value",          color = "Portfolio") +     geom_smooth(method = "loess") +     theme_tq() +     scale_color_tq() +     scale_y_continuous(labels = scales::dollar)
weights <- c(     0.50, 0.25, 0.25,      0.50, 0.4, 0.1,      1, 0, 0 )
wts_map <- tibble(     symbols = c(ticker[1:2]),     weights = weights ) wts_map
wts_map <- tibble(     symbols = c(ticker[1:3]),     weights = weights ) wts_map
weights_table
wts_map <- tibble(     symbols = c(ticker[1:2]),     weights = c(0.5, 0.5) ) wts_map
wts_map <- tibble(     symbols = stocks,     weights = weights ) wts_map
weights <- c(     0.50, 0.25, 0.25,      0.50, 0.4, 0.1,      1, 0, 0 ) stocks <- ticker[1:3]
wts_map <- tibble(     symbols = stocks,     weights = weights )
wts_map <- tibble(     symbols = c(ticker[1:2]),     weights = c(0.5, 0.5) ) wts_map
portfolio_returns_monthly <- stock_returns_monthly %>%     tq_portfolio(assets_col  = symbol,                   returns_col = Ra,                   weights     = wts_map,                   col_rename = "Ra")
source("C:/OneDrive/7_DataScience/02_Visual Studio/2_GitHub/Portfolio_Analytics/Portfolio_Analytics/Portfolio_Scenarios/LoadQuotes.R", echo = TRUE, encoding = "Windows-1252")
source("C:/OneDrive/7_DataScience/02_Visual Studio/2_GitHub/Portfolio_Analytics/Portfolio_Analytics/Portfolio_Scenarios/SingleAssets_V0.1.R", echo = TRUE, encoding = "Windows-1252")
source("C:/OneDrive/7_DataScience/02_Visual Studio/2_GitHub/Portfolio_Analytics/Portfolio_Analytics/Portfolio_Scenarios/SingleAssets_V0.1.R", echo = TRUE, encoding = "Windows-1252")
baseline_returns_monthly <- "XLK" %>%     tq_get(get  = "stock.prices",            from = "2007-01-01",             to   = "2017-11-01") %>%            tq_transmute(select     = adjusted,                   mutate_fun = periodReturn,                  period = "monthly",                  col_rename = "Rb")
returns_joined <- left_join(Quotes_returns_monthly,                              baseline_returns_monthly,                             by = "date") returns_joined returns_joined <- na.omit(returns_joined) Quotes_rolling_corr <- returns_joined %>%     tq_transmute_xy(x          = Ra,                      y          = Rb,                     mutate_fun = runCor,                     n          = 6,                     col_rename = "rolling.corr.6") #And, we can plot the rolling correlations for the Quotes stocks.
source("C:/OneDrive/7_DataScience/02_Visual Studio/2_GitHub/Portfolio_Analytics/Portfolio_Analytics/Portfolio_Scenarios/SingleAssets_V0.1.R", echo = TRUE, encoding = "Windows-1252")
source("C:/OneDrive/7_DataScience/02_Visual Studio/2_GitHub/Portfolio_Analytics/Portfolio_Analytics/Portfolio_Scenarios/LoadQuotes.R", echo = TRUE, encoding = "Windows-1252")
source("C:/OneDrive/7_DataScience/02_Visual Studio/2_GitHub/Portfolio_Analytics/Portfolio_Analytics/Portfolio_Scenarios/SingleAssets_V0.1.R", echo = TRUE, encoding = "Windows-1252")
source("C:/OneDrive/7_DataScience/02_Visual Studio/2_GitHub/Portfolio_Analytics/Portfolio_Analytics/Portfolio_Scenarios/Portfolio_V0.1.R", echo = TRUE, encoding = "Windows-1252")
wts_map <- tibble(     symbols = c(ticker[1:2]),     weights = c(0.5, 0.5) ) wts_map
portfolio_returns_monthly <- stock_returns_monthly %>%     tq_portfolio(assets_col = symbol,                  returns_col = Ra,                  weights = wts_map,                  col_rename = "Ra")
portfolio_returns_monthly %>%     ggplot(aes(x = date, y = Ra)) +     geom_bar(stat = "identity", fill = palette_light()[[1]]) +     labs(title = "Portfolio Returns",          subtitle = "50% AAPL, 0% GOOG, and 50% NFLX",          caption = "Shows an above-zero trend meaning positive returns",          x = "", y = "Monthly Returns") +          geom_smooth(method = "lm") +          theme_tq() +          scale_color_tq() +          scale_y_continuous(labels = scales::percent)
#Custom portfolio_growth_monthly <- stock_returns_monthly %>%     tq_portfolio(assets_col = symbol,                  returns_col = Ra,                  weights = wts_map,                  col_rename = "investment.growth",                  wealth.index = TRUE) %>%                  mutate(investment.growth = investment.growth * 10000) portfolio_growth_monthly %>%     ggplot(aes(x = date, y = investment.growth)) +     geom_line(size = 2, color = palette_light()[[1]]) +     labs(title = "Portfolio Growth",          subtitle = "50% AAPL, 0% GOOG, and 50% NFLX",          caption = "Now we can really visualize performance!",          x = "", y = "Portfolio Value") +          geom_smooth(method = "loess") +          theme_tq() +          scale_color_tq() +          scale_y_continuous(labels = scales::dollar)
#CHARTS # Multiple Portfolios portfolio_growth_monthly_multi <- stock_returns_monthly_multi %>%     tq_portfolio(assets_col = symbol,                  returns_col = Ra,                  weights = weights_table,                  col_rename = "investment.growth",                  wealth.index = TRUE) %>%                  mutate(investment.growth = investment.growth * 10000) portfolio_growth_monthly_multi %>%     ggplot(aes(x = date, y = investment.growth, color = factor(portfolio))) +     geom_line(size = 2) +     labs(title = "Portfolio Growth",          subtitle = "Comparing Multiple Portfolios",          caption = "Portfolio 3 is a Standout!",          x = "", y = "Portfolio Value",          color = "Portfolio") +          geom_smooth(method = "loess") +          theme_tq() +          scale_color_tq() +          scale_y_continuous(labels = scales::dollar)
source("C:/OneDrive/7_DataScience/02_Visual Studio/2_GitHub/Portfolio_Analytics/Portfolio_Analytics/Portfolio_Scenarios/Portfolio_V0.1.R", echo = TRUE, encoding = "Windows-1252")
?tq_get
rtvs::debug_source("C:/OneDrive/7_DataScience/02_Visual Studio/2_GitHub/Portfolio_Analytics/Portfolio_Analytics/Script.R")
source("C:/OneDrive/7_DataScience/02_Visual Studio/2_GitHub/Portfolio_Analytics/Portfolio_Analytics/Portfolio_Scenarios/LoadQuotes.R", echo = TRUE, encoding = "Windows-1252")
source("C:/OneDrive/7_DataScience/02_Visual Studio/2_GitHub/Portfolio_Analytics/Portfolio_Analytics/Portfolio_Scenarios/LoadQuotes.R", echo = TRUE, encoding = "Windows-1252")
source("C:/OneDrive/7_DataScience/02_Visual Studio/2_GitHub/Portfolio_Analytics/Portfolio_Analytics/Portfolio_Scenarios/SingleAssets_V0.1.R", echo = TRUE, encoding = "Windows-1252")
source("C:/OneDrive/7_DataScience/02_Visual Studio/2_GitHub/Portfolio_Analytics/Portfolio_Analytics/Portfolio_Scenarios/Portfolio_V0.1.R", echo = TRUE, encoding = "Windows-1252")
FANG_max_by_qtr <- Quotes %>%     group_by(symbol) %>%     tq_transmute(select = adjusted,                  mutate_fun = apply.quarterly,                  FUN = max,                  col_rename = "max.close") %>%                  mutate(year.qtr = paste0(year(date), "-Q", quarter(date))) %>%                  select(-date) FANG_max_by_qtr
FANG_min_by_qtr <- Quotes %>%     group_by(symbol) %>%     tq_transmute(select = adjusted,                  mutate_fun = apply.quarterly,                  FUN = min,                  col_rename = "min.close") %>%                  mutate(year.qtr = paste0(year(date), "-Q", quarter(date))) %>%                  select(-date)
Quotes_max_by_qtr <- Quotes %>%     group_by(symbol) %>%     tq_transmute(select = adjusted,                  mutate_fun = apply.quarterly,                  FUN = max,                  col_rename = "max.close") %>%                  mutate(year.qtr = paste0(year(date), "-Q", quarter(date))) %>%                  select(-date) FANG_max_by_qtr #The minimum each quarter can be retrieved in much the same way. The data frames can be joined using left_join to get the max and min by quarter. Quotes_min_by_qtr <- Quotes %>%     group_by(symbol) %>%     tq_transmute(select = adjusted,                  mutate_fun = apply.quarterly,                  FUN = min,                  col_rename = "min.close") %>%                  mutate(year.qtr = paste0(year(date), "-Q", quarter(date))) %>%                  select(-date) Quotes_by_qtr <- left_join(Quotes_max_by_qtr, FANG_min_by_qtr,                          by = c("symbol" = "symbol",                                 "year.qtr" = "year.qtr"))
Quotes_by_qtr
Quotes_by_qtr %>%     ggplot(aes(x = year.qtr, color = symbol)) +     geom_segment(aes(xend = year.qtr, y = min.close, yend = max.close),                  size = 1) +                  geom_point(aes(y = max.close), size = 2) +                  geom_point(aes(y = min.close), size = 2) +                  facet_wrap(~symbol, ncol = 2, scale = "free_y") +                  labs(title = "FANG: Min/Max Price By Quarter",          y = "Stock Price", color = "") +          theme_tq() +          scale_color_tq() +          scale_y_continuous(labels = scales::dollar) +          theme(axis.text.x = element_text(angle = 90, hjust = 1),           axis.title.x = element_blank())
Quotes2pairs <- subset(Quotes, symbol == "SIE.DE" | symbol == "CBK.DE" ) stock_pairs <- Quotes2pairs %>%     tq_transmute(select = adjusted,                  mutate_fun = periodReturn,                  period = "daily",                  type = "log",                  col_rename = "returns") %>%                  spread(key = symbol, value = returns)
stock_prices <- c("MA", "V") %>%     tq_get(get = "stock.prices",            from = "2015-01-01",            to = "2016-12-31") %>%            group_by(symbol)
stock_pairs <- Quotes2pairs %>%     tq_transmute(select = adjusted,                  mutate_fun = periodReturn,                  period = "daily",                  type = "log",                  col_rename = "returns") %>%                  spread(key = symbol, value = returns)
Quotes2pairs <- subset(Quotes, symbol == "SIE.DE" | symbol == "CBK.DE" )
stock_pairs <- stock_prices %>%     tq_transmute(select = adjusted,                  mutate_fun = periodReturn,                  period = "daily",                  type = "log",                  col_rename = "returns") %>%                  spread(key = symbol, value = returns)
stock_pairs <- Quotes2pairs %>%     tq_transmute(select = adjusted,                  mutate_fun = periodReturn,                  period = "daily",                  type = "log",                  col_rename = "returns") %>%                  spread(key = symbol, value = returns)
stock_pairs <- Quotes2pairs %>%     tq_transmute(select = adjusted,                  mutate_fun = periodReturn,                  period = "daily",                  type = "log",                  col_rename = "returns") %>%                  spread(key = symbol, value = returns)
stock_pairs <- Quotes2pairs %>%     tq_transmute(select = adjusted,                  mutate_fun = periodReturn,                  period = "daily",                  type = "log",                  col_rename = "returns") %>%                  spread(key = symbol, value = returns)
stock_prices <- c("MA", "V") %>%     tq_get(get = "stock.prices",            from = "2015-01-01",            to = "2016-12-31") %>%            group_by(symbol) stock_pairs <- stock_prices %>%     tq_transmute(select = adjusted,                  mutate_fun = periodReturn,                  period = "daily",                  type = "log",                  col_rename = "returns") %>%                  spread(key = symbol, value = returns)
stock_pairs %>%     ggplot(aes(x = V, y = MA)) +     geom_point(color = palette_light()[[1]], alpha = 0.5) +     geom_smooth(method = "lm") +     labs(title = "Visualizing Returns Relationship of Stock Pairs") +     theme_tq()
lm(MA ~ V, data = stock_pairs) %>%     summary()
regr_fun <- function(data) {     coef(lm(MA ~ V, data = timetk::tk_tbl(data, silent = TRUE))) } stock_pairs <- stock_pairs %>%          tq_mutate(mutate_fun = rollapply,                    width = 90,                    FUN = regr_fun,                    by.column = FALSE,                    col_rename = c("coef.0", "coef.1")) stock_pairs stock_pairs %>%     ggplot(aes(x = date, y = coef.1)) +     geom_line(size = 1, color = palette_light()[[1]]) +     geom_hline(yintercept = 0.8134, size = 1, color = palette_light()[[2]]) +     labs(title = "MA ~ V: Visualizing Rolling Regression Coefficient", x = "") +     theme_tq()
stock_prices <- c("MA", "V") %>%     tq_get(get = "stock.prices",            from = "2015-01-01",            to = "2016-12-31") %>%            group_by(symbol)
stock_pairs <- stock_prices %>%     tq_transmute(select = adjusted,                  mutate_fun = periodReturn,                  period = "daily",                  type = "log",                  col_rename = "returns") %>%                  spread(key = symbol, value = returns)
stock_prices <- c("MA", "V") %>%     tq_get(get = "stock.prices",            from = "2015-01-01",            to = "2016-12-31") %>%            group_by(symbol)
stock_pairs <- stock_prices %>%     tq_transmute(select = adjusted,                  mutate_fun = periodReturn,                  period = "daily",                  type = "log",                  col_rename = "returns") %>%                  spread(key = symbol, value = returns)
stock_pairs %>%     ggplot(aes(x = V, y = MA)) +     geom_point(color = palette_light()[[1]], alpha = 0.5) +     geom_smooth(method = "lm") +     labs(title = "Visualizing Returns Relationship of Stock Pairs") +     theme_tq()
stock_prices <- c("SIE.DE", "CBK.DE") %>%     tq_get(get = "stock.prices",            from = "2015-01-01",            to = "2016-12-31") %>%            group_by(symbol)
stock_pairs <- stock_prices %>%     tq_transmute(select = adjusted,                  mutate_fun = periodReturn,                  period = "daily",                  type = "log",                  col_rename = "returns") %>%                  spread(key = symbol, value = returns) stock_pairs %>%     ggplot(aes(x = V, y = MA)) +     geom_point(color = palette_light()[[1]], alpha = 0.5) +     geom_smooth(method = "lm") +     labs(title = "Visualizing Returns Relationship of Stock Pairs") +     theme_tq()
stock_pairs %>%     ggplot(aes(x = SIE.DE, y = MA)) +     geom_point(color = palette_light()[[1]], alpha = 0.5) +     geom_smooth(method = "lm") +     labs(title = "Visualizing Returns Relationship of Stock Pairs") +     theme_tq()
stock_pairs %>%     ggplot(aes(x = SIE.DE, y = CBK.DE)) +     geom_point(color = palette_light()[[1]], alpha = 0.5) +     geom_smooth(method = "lm") +     labs(title = "Visualizing Returns Relationship of Stock Pairs") +     theme_tq()
