source('C:/OneDrive/7_DataScience/02_Visual Studio/2_GitHub/Portfolio_Analytics/Portfolio_Analytics/Shiny_prototype/Shinydashboard/Portfolio_Scenarios/LoadQuotes.R')
#Example 6: Use zoo rollapply to visualize a rolling regression
Quotes2pairs <- subset(Quotes, symbol == "SIE.DE" | symbol == "CBK.DE")
#not working
#stock_pairs <- Quotes2pairs %>%
stock_prices <- c("SIE.DE", "CBK.DE") %>%
tq_get(get = "stock.prices",
from = "2015-01-01",
to = "2016-12-31") %>%
group_by(symbol)
stock_pairs <- stock_prices %>%
tq_transmute(select = adjusted,
mutate_fun = periodReturn,
period = "daily",
type = "log",
col_rename = "returns") %>%
spread(key = symbol, value = returns)
stock_pairs %>%
ggplot(aes(x = SIE.DE, y = CBK.DE)) +
geom_point(color = palette_light()[[1]], alpha = 0.5) +
geom_smooth(method = "lm") +
labs(title = "Visualizing Returns Relationship of Stock Pairs") +
theme_tq()
Instrument1 = "SIE.DE"
Instrument2 = "CBK.DE"
lm(Instrument1 ~ Instrument2, data = stock_pairs) %>%
summary()
lm(Instrument1 ~ Instrument2, data = stock_pairs) %>%
summary()
stock_pairs
stock_pairs %>%
ggplot(aes(x = date, y = coef.1)) +
geom_line(size = 1, color = palette_light()[[1]]) +
geom_hline(yintercept = 0.8134, size = 1, color = palette_light()[[2]]) +
labs(title = "MA ~ V: Visualizing Rolling Regression Coefficient", x = "") +
theme_tq()
library(ggplot2)
args(Return.portfolio)
wts_map <- tibble(
symbols = c(ticker[1:2]),
weights = c(0.5, 0.5)
)
wts_map
wts_map <- tibble(
symbols = c(ticker[1:2]),
weights = c(0.5, 0.5)
)
wts_map
portfolio_returns_monthly <- stock_returns_monthly %>%
tq_portfolio(assets_col  = symbol,
returns_col = Ra,
weights     = wts_map,
col_rename = "Ra")
source('C:/OneDrive/7_DataScience/02_Visual Studio/2_GitHub/Portfolio_Analytics/Portfolio_Analytics/Shiny_prototype/Shinydashboard/Portfolio_Scenarios/SingleAssets.R')
portfolio_returns_monthly <- stock_returns_monthly %>%
tq_portfolio(assets_col  = symbol,
returns_col = Ra,
weights     = wts_map,
col_rename = "Ra")
source('C:/OneDrive/7_DataScience/02_Visual Studio/2_GitHub/Portfolio_Analytics/Portfolio_Analytics/Shiny_prototype/Shinydashboard/Portfolio_Scenarios/Portfolio_V0.1.R')
portfolio_returns_monthly <- stock_returns_monthly %>%
tq_portfolio(assets_col  = symbol,
returns_col = Ra,
weights     = wts_map,
col_rename = "Ra")
portfolio_returns_monthly %>%
ggplot(aes(x = date, y = Ra)) +
geom_bar(stat = "identity", fill = palette_light()[[1]]) +
labs(title = "Portfolio Returns",
subtitle = "50% AAPL, 0% GOOG, and 50% NFLX",
caption = "Shows an above-zero trend meaning positive returns",
x = "", y = "Monthly Returns") +
geom_smooth(method = "lm") +
theme_tq() +
scale_color_tq() +
scale_y_continuous(labels = scales::percent)
portfolio_growth_monthly <- stock_returns_monthly %>%
tq_portfolio(assets_col   = symbol,
returns_col  = Ra,
weights      = wts_map,
col_rename   = "investment.growth",
wealth.index = TRUE) %>%
mutate(investment.growth = investment.growth * 10000)
portfolio_growth_monthly %>%
ggplot(aes(x = date, y = investment.growth)) +
geom_line(size = 2, color = palette_light()[[1]]) +
labs(title = "Portfolio Growth",
subtitle = "50% AAPL, 0% GOOG, and 50% NFLX",
caption = "Now we can really visualize performance!",
x = "", y = "Portfolio Value") +
geom_smooth(method = "loess") +
theme_tq() +
scale_color_tq() +
scale_y_continuous(labels = scales::dollar)
# Multiple Portfolios
portfolio_growth_monthly_multi <- stock_returns_monthly_multi %>%
tq_portfolio(assets_col   = symbol,
returns_col  = Ra,
weights      = weights_table,
col_rename   = "investment.growth",
wealth.index = TRUE) %>%
mutate(investment.growth = investment.growth * 10000)
portfolio_growth_monthly_multi %>%
ggplot(aes(x = date, y = investment.growth, color = factor(portfolio))) +
geom_line(size = 2) +
labs(title = "Portfolio Growth",
subtitle = "Comparing Multiple Portfolios",
caption = "Portfolio 3 is a Standout!",
x = "", y = "Portfolio Value",
color = "Portfolio") +
geom_smooth(method = "loess") +
theme_tq() +
scale_color_tq() +
scale_y_continuous(labels = scales::dollar)
AllocationCurrent = read.table("AllocationCurrent.csv", sep = ",")
ticker <- as.vector(AllocationCurrent$Symbol)
From = "2014-01-01"
To = "2017-08-20"
stock_prices <- ticker %>%
tq_get(get = "stock.prices",
from = From,
to = To)
stock_prices <- ticker %>%
tq_get(get = ticker,
from = From,
to = To)
library(dplyr)
library(tidyquant)
stock_prices <- ticker %>%
tq_get(get = "stock.prices",
from = From,
to = To)
Rb <- "^GDAXI" %>%
tq_get(get  = "stock.prices",
from = From,
to   = To) %>%
tq_transmute(select     = adjusted,
mutate_fun = periodReturn,
period     = "monthly",
col_rename = "Rb")
RaRb <- left_join(Ra, Rb, by = c("date" = "date"))
Ra <- stock_prices %>%
group_by(symbol) %>%
tq_transmute(select = adjusted,
mutate_fun = periodReturn,
period = "monthly",
col_rename = "Ra")
Rb <- "^GDAXI" %>%
tq_get(get  = "stock.prices",
from = From,
to   = To) %>%
tq_transmute(select     = adjusted,
mutate_fun = periodReturn,
period     = "monthly",
col_rename = "Rb")
RaRb <- left_join(Ra, Rb, by = c("date" = "date"))
RaRb
RaRb_capm <- RaRb %>%
tq_performance(Ra = Ra,
Rb = Rb,
performance_fun = table.CAPM)
RaRb_capm
AB=RaRb_capm %>%
select(Alpha, Beta)
args(SharpeRatio)
SR=stock_returns_monthly %>%
tq_performance(Ra = Ra,
Rb = NULL,
performance_fun = SharpeRatio)
# Now we have the Sharpe Ratio for each of the stocks.
#What if we want to adjust the parameters of the function?
#We can just add on the arguments of the underlying function.
SR_2=stock_returns_monthly %>%
tq_performance(Ra = Ra,
Rb = NULL,
performance_fun = SharpeRatio,
Rf = 0.03 / 12,
p = 0.99)
#1B & 2B
#baseline_returns_monthly <- "XLK" %>%
#tq_get(get  = "stock.prices",
#from = "2010-01-01",
#to   = "2015-12-31") %>%
#tq_transmute(select     = adjusted,
#mutate_fun = periodReturn,
#period     = "monthly",
#col_rename = "Rb")
baseline_returns_monthly =Rb
#3A Method 2
wts_map <- tibble(
symbols = c(ticker[1:2]),
weights = c(0.5, 0.5)
)
wts_map <- tibble(
symbols = c(ticker[1:2]),
weights = c(0.5, 0.5)
)
c(ticker[1:2])
ticker <- as.vector(AllocationCurrent$Symbol)
ticker
AllocationCurrent = read.table("AllocationCurrent.csv", sep = ",")
ticker <- as.vector(AllocationCurrent$Symbol)
ticker
setwd("C:/OneDrive/7_DataScience/02_Visual Studio/2_GitHub/Portfolio_Analytics/Portfolio_Analytics/Shiny_prototype/Shinydashboard/Portfolio_Scenarios")
AllocationCurrent = read.table("AllocationCurrent.csv", sep = ",")
ticker <- as.vector(AllocationCurrent$Symbol)
ticker
View(AllocationCurrent)
View(AllocationCurrent)
AllocationCurrent = read.table("AllocationCurrent.csv", sep = ",",header=T)
View(AB)
View(AB)
ticker <- as.vector(AllocationCurrent$symbol)
ticker
AllocationCurrent$symbol
View(AllocationCurrent)
View(AllocationCurrent)
AllocationCurrent = read.table("AllocationCurrent.csv", sep = ",",header=T)
AllocationCurrent
AllocationCurrent = read.table("AllocationCurrent.xlsx", sep = ",",header=T)
AllocationCurrent = read.table("AllocationCurrent.xlsx",header=T)
AllocationCurrent = read.xlsx("AllocationCurrent.xlsx",header=T)
library(readxl)
AllocationCurrent = read.xlsx("AllocationCurrent.xlsx",header=T)
