library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
install.packages("dplR", lib="C:/Users/danny.rasch/Documents/R/R-3.4.2/library")
library(shiny) runApp()
library(shiny) runApp()
print("loading app...")
source("global/dependencies.R")
dependencies <- c(
  "data.table",
  "digest",
  "dplyr",
  "dtplyr",
  "dygraphs",
  "ggplot2",
  "jsonlite",
  "lubridate",
  "magrittr",
  "PerformanceAnalytics",
  "R6",
  "rhandsontable",
  "RCurl",
  "RSQLite",
  "scales",
  "shiny",
  "shinythemes",
  "tidyr",
  "XML",
  "xts"
  )
new.packages <- dependencies[!(dependencies %in% installed.packages()[,"Package"])]
if(length(new.packages)>0) install.packages(new.packages)
lapply(dependencies, library, character.only = TRUE)
install.packages("dplyr", lib="C:/Users/danny.rasch/Documents/R/R-3.4.2/library")
source("global/dependencies.R")
source("global/dependencies.R")
source("global/dependencies.R")
source("global/utils.R")
sourceDir("global/futures-data", trace = FALSE)
# init db
db <- Db$new()$singleton$init(localf="local/contracts_data.sqlite", portablef="portable.sqlite")
library(shiny) runApp()
n
s
n
n
n
n
c
db <- Db$new()$singleton$init(localf="local/contracts_data.sqlite", portablef="portable.sqlite")
Db <- R6Class("Db",
  public = list(
    localDBI = NULL,
    localDPL = NULL,
    portableDBI = NULL,
    portableDPL = NULL,
    init = function (localf, portablef) {
      sqlite    <- dbDriver("SQLite")
      dir.create(dirname(localf), showWarnings = FALSE)
      self$localDPL <- src_sqlite(localf, create = TRUE)
      self$localDBI <- dbConnect(sqlite, localf)
      dir.create(dirname(portablef), showWarnings = FALSE)
      self$portableDPL <- src_sqlite(portablef, create = TRUE)
      self$portableDBI <- dbConnect(sqlite, portablef)
      if (!dbExistsTable(self$localDBI, "contracts")) {
        res <- dbSendQuery(self$localDBI, "CREATE TABLE contracts(completeCode text, genericCode text, expDate text, expMonth numeric, expYear numeric, lastFetch text,  data blob,  lastPrice real)")
        dbClearResult(res)
      }
      if (!dbExistsTable(self$portableDBI, "tickers")) {
        res <- dbSendQuery(self$portableDBI, "CREATE TABLE tickers (Name TEXT, Type TEXT, \"IB Ticker\" TEXT PRIMARY KEY, \"Quandl Code\" TEXT, \"Multiplier\" REAL, \"Currency\" TEXT, \"Margin\" REAL, \"RefNum\" TEXT)")
        dbClearResult(res)
      }
      if (!dbExistsTable(self$portableDBI, "rates")) {
        res <- dbSendQuery(self$portableDBI, "CREATE TABLE rates (shortName TEXT primary key, Name TEXT, \"Quandl Code\" TEXT, Type TEXT, Country TEXT, Term TEXT)")
        dbClearResult(res)
      }
      if (!dbExistsTable(self$localDBI, "rates_data")) {
        res <- dbSendQuery(self$localDBI, "CREATE TABLE rates_data(shortName text,  lastFetch text, data blob)")
        dbClearResult(res)
      }
      if (!dbExistsTable(self$portableDBI, "fx")) {
        res <- dbSendQuery(self$portableDBI, "CREATE TABLE fx (shortName text primary key, Name TEXT, \"Quandl Code\" TEXT, codeFrom TEXT, codeTo TEXT)")
        dbClearResult(res)
      }
      if (!dbExistsTable(self$localDBI, "fx_data")) {
        res <- dbSendQuery(self$localDBI, "CREATE TABLE fx_data(shortName text, lastFetch text, data blob)")
        dbClearResult(res)
      }
      if (!dbExistsTable(self$localDBI, "keyval")) {
        res <- dbSendQuery(self$localDBI, "CREATE TABLE keyval (key TEXT PRIMARY KEY, value TEXT)")
        dbClearResult(res)
      }
      if (!dbExistsTable(self$localDBI, "series")) {
        res <- dbSendQuery(self$localDBI, "CREATE TABLE series (key TEXT PRIMARY KEY, data BLOB)")
        dbClearResult(res)
      }
      if (!dbExistsTable(self$portableDBI, "portfolios")) {
        res <- dbSendQuery(self$portableDBI, "CREATE TABLE portfolios(name text primary key, assetClasses text, assets text, strategies text)")
        dbClearResult(res)
      }
      if (!dbExistsTable(self$localDBI, "strats_cache")) {
        res <- dbSendQuery(self$localDBI, "CREATE TABLE strats_cache (Date TEXT, genericCode TEXT, call TEXT, signature TEXT, Position DOUBLE, v1 DOUBLE, v2 DOUBLE, v3 DOUBLE, v4 DOUBLE, v5 DOUBLE)")
        dbClearResult(res)
      }
      self
    },
    writeKey = function (key, value) {
      res <- dbSendQuery(self$localDBI, paste0("INSERT OR REPLACE INTO keyval(key, value) VALUES(\"",key,"\",\"",value,"\")"))
      dbClearResult(res)
    },
    readKey = function (key, default=NULL) {
      quer <- dbSendQuery(self$localDBI, paste0("SELECT * FROM keyval WHERE key=\"",key,"\""))
      res <- fetch(quer)
      dbClearResult(quer)
      if (!is.null(res) && !is.null(res$key) && length(res$key)>0){
        convert <- suppressWarnings(as.numeric(res$value[1], t))
        if (!is.na(convert)) {
          return (convert)
        } else {
          if (res$value[1] == "FALSE") {
            return (FALSE)
          } else if (res$value[1] == "TRUE") {
            return (TRUE)
          } else {
            return (res$value[1])        
          }
        }
      }
      if (!is.null(default)) {
        return (default)
      } else {
        return (NULL)
      }
    },
    writeSeries = function (key, value) {
      insertdata <- data.frame(
        key=key,
        data=I(list(serialize(value, NULL))),
        stringsAsFactors = FALSE
      )
      res <- dbSendPreparedQuery(self$localDBI, "insert or replace into series(key, data) values(?,?)", bind.data=insertdata)
      dbClearResult(quer)
    },
    readSeries = function (key) {
      quer <- dbSendQuery(self$localDBI, paste0("SELECT * FROM series WHERE key=\"",key,"\""))
      res <- fetch(quer)
      dbClearResult(quer)
      data <- NULL
      if (!is.null(res) && !is.null(res$key) && length(res$key)>0){
        data <- unserialize(res$data[[1]])
      }
      data
    }
  ),
  active = list(
    singleton = function() {
      if (is.null(private$senv$sgt)) {
        private$senv$sgt <- Db$new()
      }
      private$senv$sgt
    }),
  private = list(senv = new.env())
)
test = Db(localf = "local/contracts_data.sqlite", portablef = "portable.sqlite")
test = Db$new(localf = "local/contracts_data.sqlite", portablef = "portable.sqlite")
db <- Db$new()$singleton$init(localf="local/contracts_data.sqlite", portablef="portable.sqlite")
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
n
c
n
c
n
c
n
c
n
n
c
n
c
n
c
n
c
n
c
n
c
n
c
n
c
n
c
n
c
n
c
n
c
n
c
n
c
n
s
c
n
c
n
c
n
c
n
c
n
c
n
c
n
c
n
c
n
c
n
c
n
c
n
c
n
c
n
c
n
c
n
c
n
c
n
c
n
c
n
c
n
c
n
c
n
c
n
c
n
c
n
c
n
c
n
c
n
c
library(shiny) runApp()
print("loading app...")
source("global/dependencies.R")
source("config.R")
# utils functions
source("global/utils.R")
sourceDir("global/futures-data", trace = FALSE)
# init db
db <- Db$new()$singleton$init(localf="local/contracts_data.sqlite", portablef="portable.sqlite")
# data source R6 class
futuresData <- FuturesData$new()$singleton
futuresData$load()
ratesData <- RatesData$new()$singleton
futuresData <- FuturesData$new()$singleton
futuresData$load()
ratesData <- RatesData$new()$singleton
futuresData <- FuturesData$new()$singleton
futuresData$load()
print("loading app...")
source("global/dependencies.R")
source("config.R")
# utils functions
source("global/utils.R")
print("loading app...")
source("global/dependencies.R")
source("config.R")
# utils functions
source("global/utils.R")
sourceDir("global/futures-data", trace = FALSE)
# init db
db <- Db$new()$singleton$init(localf="local/contracts_data.sqlite", portablef="portable.sqlite")
# data source R6 class
futuresData <- FuturesData$new()$singleton
futuresData$load()
source("config.R")
# utils functions
source("global/utils.R")
sourceDir("global/futures-data", trace = FALSE)
# init db
db <- Db$new()$singleton$init(localf="local/contracts_data.sqlite", portablef="portable.sqlite")
# data source R6 class
futuresData <- FuturesData$new()$singleton
futuresData$load()
ratesData <- RatesData$new()$singleton
rtvs::debug_source("C:/OneDrive/7_DataScience/02_Visual Studio/2_GitHub/Portfolio_Analytics/Portfolio_Analytics/shiny-futures-master/global.R", encoding = "Windows-1252")
source("config.R")
# utils functions
source("global/utils.R")
sourceDir("global/futures-data", trace = FALSE)
# init db
db <- Db$new()$singleton$init(localf="local/contracts_data.sqlite", portablef="portable.sqlite")
# data source R6 class
futuresData <- FuturesData$new()$singleton
futuresData$load()
ratesData <- RatesData$new()$singleton
futuresData <- FuturesData$new()$singleton
futuresData$load()
db <- Db$new()$singleton$init(localf="local/contracts_data.sqlite", portablef="portable.sqlite")
# data source R6 class
futuresData <- FuturesData$new()$singleton
futuresData$load()
ratesData <- RatesData$new()$singleton
ratesData$load()
fXData <- FXData$new()$singleton
fXData$load()
futuresData <- FuturesData$new()$singleton
futuresData$load()
ratesData <- RatesData$new()$singleton
ratesData$load()
fXData <- FXData$new()$singleton
fXData$load()
library(shiny) runApp()
library(shiny) runApp()
db <- Db$new()$singleton$init(localf="local/contracts_data.sqlite", portablef="portable.sqlite")
# data source R6 class
futuresData <- FuturesData$new()$singleton
futuresData$load()
ratesData <- RatesData$new()$singleton
ratesData$load()
fXData <- FXData$new()$singleton
fXData$load()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
install.packages("shinydashboard", lib="C:/Users/danny.rasch/Documents/R/R-3.4.2/library")
library(shiny) runApp()
library(shiny) runApp()
   set.seed(122)     histdata <- rnorm(500)     output$plot1 <- renderPlot({     data <- histdata[seq_len(input$slider)]     hist(data)          })
    data <- histdata[seq_len(input$slider)]
    set.seed(122)
    histdata <- rnorm(500)
    data <- histdata[seq_len(input$slider)]
    hist(data)
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
source("modules/data.R")
source("modules/gapModule.R")
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
source("global/sidebar.R")
library(shiny) runApp()
library(shiny) runApp()
print("loading app...") source("global/dependencies.R") source("global/sidebar.R") # utils functions #sourceDir("global/futures-data", trace = FALSE) # init db #db <- Db$new()$singleton$init(localf="local/contracts_data.sqlite", portablef="portable.sqlite") # loading modules  sourceDir("modules", trace = FALSE)
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
print("loading app...") source("global/dependencies.R") source("global/sidebar.R") # utils functions #sourceDir("global/futures-data", trace = FALSE) # init db #db <- Db$new()$singleton$init(localf="local/contracts_data.sqlite", portablef="portable.sqlite") # loading modules  sourceDir("modules", trace = FALSE)
library(shiny) runApp()
print("loading app...") source("global/dependencies.R") source("global/sidebar.R") # utils functions #sourceDir("global/futures-data", trace = FALSE) # init db #db <- Db$new()$singleton$init(localf="local/contracts_data.sqlite", portablef="portable.sqlite") # loading modules  sourceDir("modules", trace = FALSE)
library(shiny) runApp()
library(shiny) runApp()
print("loading app...") source("global/dependencies.R") source("global/sidebar.R") # utils functions #sourceDir("global/futures-data", trace = FALSE) # init db #db <- Db$new()$singleton$init(localf="local/contracts_data.sqlite", portablef="portable.sqlite") # loading modules  sourceDir("modules", trace = FALSE)
library(shiny) runApp()
library(shiny) runApp()
print("loading app...") source("global/dependencies.R") source("global/sidebar.R") # utils functions #sourceDir("global/futures-data", trace = FALSE) # init db #db <- Db$new()$singleton$init(localf="local/contracts_data.sqlite", portablef="portable.sqlite") # loading modules  sourceDir("modules", trace = FALSE)
library(shiny) runApp()
print("loading app...") source("global/dependencies.R") source("global/sidebar.R") # utils functions #sourceDir("global/futures-data", trace = FALSE) # init db #db <- Db$new()$singleton$init(localf="local/contracts_data.sqlite", portablef="portable.sqlite") # loading modules  sourceDir("modules", trace = FALSE)
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
diamonds
library(shiny) runApp()
library(shiny) runApp()
n
c
n
s
n
s
s
n
n
