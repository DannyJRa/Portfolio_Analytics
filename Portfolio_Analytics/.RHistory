library(googleway)
api_key <- "AIzaSyBzaG80oBtS4WShTNj13cWQJ9kJI9RF4LA"
map_key <- "AIzaSyBzaG80oBtS4WShTNj13cWQJ9kJI9RF4LA"
## set up a data.frame of locations ## can also use 'lat/lon' coordinates as the origin/destination df_locations <- data.frame(origin = c("Melbourne, Australia", "Sydney, Australia"),                            destination = c("Sydney, Australia", "Brisbane, Australia"),                            stringsAsFactors = F) ## loop over each pair of locations, and extract the polyline from the result lst_directions <- apply(df_locations, 1, function(x){   res <- google_directions(key = api_key,                            origin = x[['origin']],                            destination = x[['destination']])   df_result <- data.frame(origin = x[['origin']],                           destination = x[['destination']],                           route = res$routes$overview_polyline$points)   return(df_result) }) ## convert the results to a data.frame df_directions <- do.call(rbind, lst_directions) ## plot the map google_map(key = map_key ) %>%   add_polylines(data = df_directions, polyline = "route")
library(readr) titanic_data <- read_csv("plumber_titanic/train.csv")
library(readr) titanic_data <- read_csv("plumber_titanic/train.csv")
library(readr)
titanic_data <- read_csv("plumber_titanic/train.csv")
titanic_data <- read_csv("plumber_titanic/train.csv")
transform_titantic_data <- function(input_titantic_data) {     ouput_titantic_data <- data.frame(     survived = factor(input_titantic_data$Survived, levels = c(0, 1)),     pclass = factor(input_titantic_data$Pclass, levels = c(1, 2, 3)),     female = tolower(input_titantic_data$Sex) == "female",     age = factor(dplyr::if_else(input_titantic_data$Age < 18, "child", "adult", "unknown"),                  levels = c("child", "adult", "unknown"))   ) } clean_titanic <- transform_titantic_data(titanic_data)
set.seed(42) training_rows <- sample(1:nrow(clean_titanic), size = floor(0.7*nrow(clean_titanic))) train_df <- clean_titanic[training_rows, ] test_df <- clean_titanic[-training_rows, ] titanic_glm <- glm(survived ~ pclass + female + age,                     data = clean_titanic, family = binomial(link = "logit"))
test_predictions <- predict(titanic_glm, newdata = test_df, type = "response") >= 0.5
test_actuals <- test_df$survived == 1
accuracy <- table(test_predictions, test_actuals)
print(accuracy)
print(paste0("Accuracy: ", round(100 * sum(diag(accuracy))/sum(accuracy), 2), "%"))
saveRDS(titanic_glm, file = "plumber_titanic/model.Rds", compress = TRUE)
library(plumber)
install.packages("plumber", lib="C:/Users/insid/Documents/R/win-library/3.4")
library(plumber)
serve_model <- plumb("plumber_titantic/titanic-api.R")
serve_model$run(port = 8000)
#* @get /healthcheck health_check <- function() {     result <- data.frame(     "input" = "",     "status" = 200,     "model_version" = MODEL_VERSION   )     return(result) }
source("R:/7_DataScience/02_Visual Studio/2_GitHub/Portfolio_Analytics/Portfolio_Analytics/Shiny_ML/plumber_titanic/server.R", encoding = "Windows-1252")
serve_model <- plumb("plumber_titantic/titanic-api.R")
source("R:/7_DataScience/02_Visual Studio/2_GitHub/Portfolio_Analytics/Portfolio_Analytics/Shiny_ML/plumber_titanic/server.R", encoding = "Windows-1252")
source("R:/7_DataScience/02_Visual Studio/2_GitHub/Portfolio_Analytics/Portfolio_Analytics/Shiny_ML/plumber_titanic/server.R", encoding = "Windows-1252")
source("R:/7_DataScience/02_Visual Studio/2_GitHub/Portfolio_Analytics/Portfolio_Analytics/Shiny_ML/plumber_titanic/server.R", encoding = "Windows-1252")
source("R:/7_DataScience/02_Visual Studio/2_GitHub/Portfolio_Analytics/Portfolio_Analytics/Shiny_ML/plumber_titanic/server.R", encoding = "Windows-1252")
library(readr)
library(plumber)
