col_rename = "rolling.corr.6")
View(FANG)
View(FANG)
FANG = filter(FANG, symbol == c("SIE.DE","CBK.DE"))
View(FANG)
View(FANG)
d <- fread("Quotes_detail.csv")
d$date = as.Date(d$date)
setwd("C:/OneDrive/PowerBI_test/Portfolio_Slicer/Input")
library(data.table)
d <- fread("Quotes_detail.csv")
d <- fread("C:/OneDrive/PowerBI_test/Portfolio_Slicer/Input/Quotes_detail.csv")
d$date = as.Date(d$date)
FANG=d
View(FANG)
View(FANG)
FANG = filter(FANG, symbol == c("SIE.DE","CBK.DE"))
FANG = filter(FANG, symbol == c("SIE.DE","CBK.DE")
#########
FANG_annual_returns <- FANG %>%
FANG = filter(FANG, symbol == c("SIE.DE","CBK.DE"))
View(FANG)
View(FANG)
d <- fread("C:/OneDrive/PowerBI_test/Portfolio_Slicer/Input/Quotes_detail.csv")
d$date = as.Date(d$date)
FANG=d
View(FANG)
View(FANG)
FANG_annual_returns <- FANG %>%
group_by(symbol) %>%
tq_transmute(select     = adjusted,
mutate_fun = periodReturn,
period     = "yearly",
type       = "arithmetic")
FANG_annual_returns
FANG_annual_returns %>%
ggplot(aes(x = date, y = yearly.returns, fill = symbol)) +
geom_bar(stat = "identity") +
geom_hline(yintercept = 0, color = palette_light()[[1]]) +
scale_y_continuous(labels = scales::percent) +
labs(title = "FANG: Annual Returns",
subtitle = "Get annual returns quickly with tq_transmute!",
y = "Annual Returns", x = "") +
facet_wrap(~ symbol, ncol = 2) +
theme_tq() +
scale_fill_tq()
FANG_daily_log_returns <- FANG %>%
group_by(symbol) %>%
tq_transmute(select     = adjusted,
mutate_fun = periodReturn,
period     = "daily",
type       = "log",
col_rename = "monthly.returns")
FANG_daily_log_returns %>%
ggplot(aes(x = monthly.returns, fill = symbol)) +
geom_density(alpha = 0.5) +
labs(title = "FANG: Charting the Daily Log Returns",
x = "Monthly Returns", y = "Density") +
theme_tq() +
scale_fill_tq() +
facet_wrap(~ symbol, ncol = 2)
FANG %>%
group_by(symbol) %>%
tq_transmute(select     = open:volume,
mutate_fun = to.period,
period     = "months")
#Without Periodicity Aggregation
FANG_daily <- FANG %>%
group_by(symbol)
FANG_daily %>%
ggplot(aes(x = date, y = adjusted, color = symbol)) +
geom_line(size = 1) +
labs(title = "Daily Stock Prices",
x = "", y = "Adjusted Prices", color = "") +
facet_wrap(~ symbol, ncol = 2, scales = "free_y") +
scale_y_continuous(labels = scales::dollar) +
theme_tq() +
scale_color_tq()
#With Periodicity Aggregation
FANG_monthly <- FANG %>%
group_by(symbol) %>%
tq_transmute(select     = adjusted,
mutate_fun = to.period,
period     = "months")
FANG_monthly %>%
ggplot(aes(x = date, y = adjusted, color = symbol)) +
geom_line(size = 1) +
labs(title = "Monthly Stock Prices",
x = "", y = "Adjusted Prices", color = "") +
facet_wrap(~ symbol, ncol = 2, scales = "free_y") +
scale_y_continuous(labels = scales::dollar) +
theme_tq() +
scale_color_tq()
# Asset Returns
FANG_returns_monthly <- FANG %>%
group_by(symbol) %>%
tq_transmute(select     = adjusted,
mutate_fun = periodReturn,
period     = "monthly")
# Baseline Returns
baseline_returns_monthly <- "GDAXI" %>%
tq_get(get  = "stock.prices",
from = "2013-01-01",
to   = "2016-12-31") %>%
tq_transmute(select     = adjusted,
mutate_fun = periodReturn,
period     = "monthly")
returns_joined <- left_join(FANG_returns_monthly,
baseline_returns_monthly,
by = "date")
returns_joined
FANG_rolling_corr <- returns_joined %>%
tq_transmute_xy(x          = monthly.returns.x,
y          = monthly.returns.y,
mutate_fun = runCor,
n          = 6,
col_rename = "rolling.corr.6")
View(FANG)
View(FANG)
View(returns_joined)
View(returns_joined)
returns_joined <- na.omit(returns_joined)
FANG_rolling_corr <- returns_joined %>%
tq_transmute_xy(x          = monthly.returns.x,
y          = monthly.returns.y,
mutate_fun = runCor,
n          = 6,
col_rename = "rolling.corr.6")
FANG_rolling_corr %>%
ggplot(aes(x = date, y = rolling.corr.6, color = symbol)) +
geom_hline(yintercept = 0, color = palette_light()[[1]]) +
geom_line(size = 1) +
labs(title = "FANG: Six Month Rolling Correlation to XLK",
x = "", y = "Correlation", color = "") +
facet_wrap(~ symbol, ncol = 2) +
theme_tq() +
scale_color_tq()
FANG_macd <- FANG %>%
group_by(symbol) %>%
tq_mutate(select     = close,
mutate_fun = MACD,
nFast      = 12,
nSlow      = 26,
nSig       = 9,
maType     = SMA) %>%
mutate(diff = macd - signal) %>%
select(-(open:volume))
View(FANG)
View(FANG)
FANG <- na.omit(FANG)
FANG_macd <- FANG %>%
group_by(symbol) %>%
tq_mutate(select     = close,
mutate_fun = MACD,
nFast      = 12,
nSlow      = 26,
nSig       = 9,
maType     = SMA) %>%
mutate(diff = macd - signal) %>%
select(-(open:volume))
FANG_macd
FANG_macd %>%
filter(date >= as_date("2016-10-01")) %>%
ggplot(aes(x = date)) +
geom_hline(yintercept = 0, color = palette_light()[[1]]) +
geom_line(aes(y = macd, col = symbol)) +
geom_line(aes(y = signal), color = "blue", linetype = 2) +
geom_bar(aes(y = diff), stat = "identity", color = palette_light()[[1]]) +
facet_wrap(~ symbol, ncol = 2, scale = "free_y") +
labs(title = "FANG: Moving Average Convergence Divergence",
y = "MACD", x = "", color = "") +
theme_tq() +
scale_color_tq()
View(FANG)
View(FANG)
FANG <-subset(FANG, SchoolName==c("SIE.DE","CBK.DE"))
FANG <-subset(FANG, symbol==c("SIE.DE","CBK.DE"))
View(FANG)
View(FANG)
d <- fread("C:/OneDrive/PowerBI_test/Portfolio_Slicer/Input/Quotes_detail.csv")
d$date = as.Date(d$date)
FANG=d
View(FANG)
View(FANG)
FANG <-subset(FANG, symbol==c("SIE.DE","CBK.DE"))
View(FANG)
View(FANG)
FANG=as.data.frame(FANG)
FANG <-subset(FANG, symbol==c("SIE.DE","CBK.DE"))
View(FANG)
View(FANG)
d <- fread("C:/OneDrive/PowerBI_test/Portfolio_Slicer/Input/Quotes_detail.csv")
d$date = as.Date(d$date)
FANG=d
FANG=as.data.frame(FANG)
View(FANG)
View(FANG)
d <- fread("C:/OneDrive/PowerBI_test/Portfolio_Slicer/Input/Quotes_detail.csv")
FANG=d
FANG=as.data.frame(FANG)
FANG <-subset(FANG, symbol==c("SIE.DE","CBK.DE"))
View(FANG)
View(FANG)
subset(FANG, date=="2007-01-02")
t=subset(FANG, date=="2007-01-02")
View(t)
View(t)
d <- fread("C:/OneDrive/PowerBI_test/Portfolio_Slicer/Input/Quotes_detail.csv")
FANG=d
t=subset(FANG, date=="2007-01-02")
FANG3 <-subset(FANG, symbol=="SIE.DE" | symbol=="CBK.DE")
View(FANG3)
View(FANG3)
FANG <-subset(FANG, symbol=="SIE.DE" | symbol=="CBK.DE")
t=subset(FANG, date=="2007-01-02")
d <- fread("C:/OneDrive/PowerBI_test/Portfolio_Slicer/Input/Quotes_detail.csv")
FANG=d
FANG <-subset(FANG, symbol=="SIE.DE" | symbol=="CBK.DE")
t=subset(FANG, date=="2007-01-02")
library(tidyquant)
data(FANG)
FANG
#############
#### Overwrite FANG
setwd("C:/OneDrive/PowerBI_test/Portfolio_Slicer/Input")
library(data.table)
# Import columns 6 and 8 of potatoes.csv: potatoes
d <- fread("C:/OneDrive/PowerBI_test/Portfolio_Slicer/Input/Quotes_detail.csv")
#d$date = as.Date(d$date)
FANG=d
#FANG=as.data.frame(FANG)
FANG <-subset(FANG, symbol=="SIE.DE" | symbol=="CBK.DE")
t=subset(FANG, date=="2007-01-02")
########
###FANG = filter(FANG, symbol == c("SIE.DE","CBK.DE"))
#########
FANG_annual_returns <- FANG %>%
group_by(symbol) %>%
tq_transmute(select     = adjusted,
mutate_fun = periodReturn,
period     = "yearly",
type       = "arithmetic")
library(tidyquant)
data(FANG)
FANG
#############
#### Overwrite FANG
setwd("C:/OneDrive/PowerBI_test/Portfolio_Slicer/Input")
library(data.table)
# Import columns 6 and 8 of potatoes.csv: potatoes
d <- fread("C:/OneDrive/PowerBI_test/Portfolio_Slicer/Input/Quotes_detail.csv")
d$date = as.Date(d$date)
FANG=d
#FANG=as.data.frame(FANG)
FANG <-subset(FANG, symbol=="SIE.DE" | symbol=="CBK.DE")
t=subset(FANG, date=="2007-01-02")
########
###FANG = filter(FANG, symbol == c("SIE.DE","CBK.DE"))
#########
FANG_annual_returns <- FANG %>%
group_by(symbol) %>%
tq_transmute(select     = adjusted,
mutate_fun = periodReturn,
period     = "yearly",
type       = "arithmetic")
FANG_annual_returns
FANG_annual_returns %>%
ggplot(aes(x = date, y = yearly.returns, fill = symbol)) +
geom_bar(stat = "identity") +
geom_hline(yintercept = 0, color = palette_light()[[1]]) +
scale_y_continuous(labels = scales::percent) +
labs(title = "FANG: Annual Returns",
subtitle = "Get annual returns quickly with tq_transmute!",
y = "Annual Returns", x = "") +
facet_wrap(~ symbol, ncol = 2) +
theme_tq() +
scale_fill_tq()
FANG_daily_log_returns <- FANG %>%
group_by(symbol) %>%
tq_transmute(select     = adjusted,
mutate_fun = periodReturn,
period     = "daily",
type       = "log",
col_rename = "monthly.returns")
FANG_daily_log_returns %>%
ggplot(aes(x = monthly.returns, fill = symbol)) +
geom_density(alpha = 0.5) +
labs(title = "FANG: Charting the Daily Log Returns",
x = "Monthly Returns", y = "Density") +
theme_tq() +
scale_fill_tq() +
facet_wrap(~ symbol, ncol = 2)
FANG %>%
group_by(symbol) %>%
tq_transmute(select     = open:volume,
mutate_fun = to.period,
period     = "months")
#Without Periodicity Aggregation
FANG_daily <- FANG %>%
group_by(symbol)
FANG_daily %>%
ggplot(aes(x = date, y = adjusted, color = symbol)) +
geom_line(size = 1) +
labs(title = "Daily Stock Prices",
x = "", y = "Adjusted Prices", color = "") +
facet_wrap(~ symbol, ncol = 2, scales = "free_y") +
scale_y_continuous(labels = scales::dollar) +
theme_tq() +
scale_color_tq()
#With Periodicity Aggregation
FANG_monthly <- FANG %>%
group_by(symbol) %>%
tq_transmute(select     = adjusted,
mutate_fun = to.period,
period     = "months")
FANG_monthly %>%
ggplot(aes(x = date, y = adjusted, color = symbol)) +
geom_line(size = 1) +
labs(title = "Monthly Stock Prices",
x = "", y = "Adjusted Prices", color = "") +
facet_wrap(~ symbol, ncol = 2, scales = "free_y") +
scale_y_continuous(labels = scales::dollar) +
theme_tq() +
scale_color_tq()
# Asset Returns
FANG_returns_monthly <- FANG %>%
group_by(symbol) %>%
tq_transmute(select     = adjusted,
mutate_fun = periodReturn,
period     = "monthly")
# Baseline Returns
baseline_returns_monthly <- "GDAXI" %>%
tq_get(get  = "stock.prices",
from = "2013-01-01",
to   = "2016-12-31") %>%
tq_transmute(select     = adjusted,
mutate_fun = periodReturn,
period     = "monthly")
#Next, join the asset returns with the baseline returns by date.
############################### make date seq from: getsymbols_irregular data.R
####################
#########################
returns_joined <- left_join(FANG_returns_monthly,
baseline_returns_monthly,
by = "date")
returns_joined
returns_joined <- na.omit(returns_joined)
FANG_rolling_corr <- returns_joined %>%
tq_transmute_xy(x          = monthly.returns.x,
y          = monthly.returns.y,
mutate_fun = runCor,
n          = 6,
col_rename = "rolling.corr.6")
#And, we can plot the rolling correlations for the FANG stocks.
FANG_rolling_corr %>%
ggplot(aes(x = date, y = rolling.corr.6, color = symbol)) +
geom_hline(yintercept = 0, color = palette_light()[[1]]) +
geom_line(size = 1) +
labs(title = "FANG: Six Month Rolling Correlation to XLK",
x = "", y = "Correlation", color = "") +
facet_wrap(~ symbol, ncol = 2) +
theme_tq() +
scale_color_tq()
FANG <- na.omit(FANG)
##Example 4: Use TTR MACD to Visualize Moving Average Convergence Divergence
FANG_macd <- FANG %>%
group_by(symbol) %>%
tq_mutate(select     = close,
mutate_fun = MACD,
nFast      = 12,
nSlow      = 26,
nSig       = 9,
maType     = SMA) %>%
mutate(diff = macd - signal) %>%
select(-(open:volume))
FANG_macd
#And, we can visualize the data like so.
FANG_macd %>%
filter(date >= as_date("2016-10-01")) %>%
ggplot(aes(x = date)) +
geom_hline(yintercept = 0, color = palette_light()[[1]]) +
geom_line(aes(y = macd, col = symbol)) +
geom_line(aes(y = signal), color = "blue", linetype = 2) +
geom_bar(aes(y = diff), stat = "identity", color = palette_light()[[1]]) +
facet_wrap(~ symbol, ncol = 2, scale = "free_y") +
labs(title = "FANG: Moving Average Convergence Divergence",
y = "MACD", x = "", color = "") +
theme_tq() +
scale_color_tq()
FANG_macd <- FANG %>%
group_by(symbol) %>%
tq_mutate(select     = close,
mutate_fun = RSI,
n          = 14,
maType     = SMA)
FANG_macd
FANG_macd %>%
filter(date >= as_date("2016-10-01")) %>%
ggplot(aes(x = date)) +
geom_hline(yintercept = 0, color = palette_light()[[1]]) +
geom_line(aes(y = SMA, col = symbol))
tickerSelected=c("SIE.DE","CBK.DE")
Ra <- tickerSelected %>%
tq_get(get  = "stock.prices",
from = "2010-01-01",
to   = "2015-12-31") %>%
group_by(symbol) %>%
tq_transmute(select     = adjusted,
mutate_fun = periodReturn,
period     = "monthly",
col_rename = "Ra")
Ra
stock_returns_monthly=dataCAPM$Ra
tickerSelected=c("SIE.DE","CBK.DE")
Ra <- tickerSelected %>%
tq_get(get  = "stock.prices",
from = "2010-01-01",
to   = "2015-12-31") %>%
group_by(symbol) %>%
tq_transmute(select     = adjusted,
mutate_fun = periodReturn,
period     = "monthly",
col_rename = "Ra")
Ra
stock_returns_monthly=dataCAPM$Ra
FANG_macd <- FANG %>%
group_by(symbol) %>%
tq_mutate(select     = close,
mutate_fun = RSI,
n          = 14,
maType     = SMA)
FANG_macd
FANG_macd %>%
filter(date >= as_date("2016-10-01")) %>%
ggplot(aes(x = date)) +
geom_hline(yintercept = 0, color = palette_light()[[1]]) +
geom_line(aes(y = SMA, col = symbol))
n=3
stock_returns_monthly <- ticker %>%
tq_get(get  = "stock.prices",
from = "2010-01-01",
to   = "2015-12-31") %>%
group_by(symbol) %>%
tq_transmute(select     = adjusted,
mutate_fun = periodReturn,
period     = "monthly",
col_rename = "Ra")
#Second, get baseline asset returns, which is the exact same as Steps 1B and 2B from the Single Portfolio example.
#baseline_returns_monthly <- "XLK" %>%
baseline_returns_monthly <- "GDAXI" %>%
tq_get(get  = "stock.prices",
from = "2010-01-01",
to   = "2015-12-31") %>%
tq_transmute(select     = adjusted,
mutate_fun = periodReturn,
period     = "monthly",
col_rename = "Rb")
stock_returns_monthly_multi <- stock_returns_monthly %>%
tq_repeat_df(n = n)
stock_returns_monthly_multi
weights <- c(
0.50, 0.25, 0.25,
0.50, 0.4, 0.1,
0.50, 0.4, 0.1
)
stocks <- ticker[1:3]
weights_table <-  tibble(stocks) %>%
tq_repeat_df(n = n) %>%
bind_cols(tibble(weights)) %>%
group_by(portfolio)
weights_table
portfolio_returns_monthly_multi <- stock_returns_monthly_multi %>%
tq_portfolio(assets_col  = symbol,
returns_col = Ra,
weights     = weights_table,
col_rename  = "Ra")
portfolio_returns_monthly_multi
RaRb_multiple_portfolio <- left_join(portfolio_returns_monthly_multi,
baseline_returns_monthly,
by = "date")
RaRb_multiple_portfolio
RaRb_multiple_portfolio %>%
tq_performance(Ra = Ra, Rb = Rb, performance_fun = table.CAPM)
RaRb_multiple_portfolio %>%
tq_performance(Ra = Ra, Rb = NULL, performance_fun = SharpeRatio)
RaRb_multiple_portfolio %>%
tq_performance(Ra = Ra, Rb = NULL, performance_fun = VaR)
tq_performance_fun_options()
source('C:/OneDrive/7_DataScience/01_R/06_Packages/Package_plotly/plotly_PerformanceAnalytics.R', echo=TRUE)
shiny::runApp('C:/OneDrive/7_DataScience/01_R/04_Shiny/Examples/095-plot-interaction-advanced')
runApp('C:/Users/danny.rasch/Downloads/webinars-master/webinars-master/08-How-to-start-with-Shiny-Part-1/code')
runApp('C:/Users/danny.rasch/Downloads/webinars-master/webinars-master/09-How-to-start-with-Shiny-Part-2/code/06-observeEvent.R')
runApp('C:/Users/danny.rasch/Downloads/webinars-master/webinars-master/09-How-to-start-with-Shiny-Part-2/code/06-observeEvent.R')
runApp('C:/Users/danny.rasch/Downloads/webinars-master/webinars-master/10-How-to-start-with-Shiny-Part-3/code/09-navbarMenu.R')
runApp('C:/Users/danny.rasch/Downloads/webinars-master/webinars-master/10-How-to-start-with-Shiny-Part-3/code/04-well.R')
runApp('C:/Users/danny.rasch/Downloads/webinars-master/webinars-master/10-How-to-start-with-Shiny-Part-3/code/App-Directory')
runApp('C:/Users/danny.rasch/Downloads/webinars-master/webinars-master/10-How-to-start-with-Shiny-Part-3/code/05-tabs.R')
runApp('C:/Users/danny.rasch/Downloads/webinars-master/webinars-master/47-introduction-to-shiny/apps/goog-index')
runApp('C:/Users/danny.rasch/Downloads/webinars-master/webinars-master/47-introduction-to-shiny/apps/movies/movies_06.R')
runApp('C:/Users/danny.rasch/Downloads/webinars-master/webinars-master/47-introduction-to-shiny/apps/movies/movies_01.R')
tagList(
sliderInput(ns("slider"), "Slide Me", 0, 100, 1),
textOutput(ns("num"))
)
library(shiny)
runApp('C:/Users/danny.rasch/Desktop')
source('C:/OneDrive/7_DataScience/02_Visual Studio/2_GitHub/Portfolio_Analytics/Portfolio_Analytics/shiny-futures-master/global/futures-data/FuturesData.R', echo=TRUE)
runApp('C:/Users/danny.rasch/Desktop')
runApp('C:/Users/danny.rasch/Downloads/webinars-master/webinars-master/19-Understanding-modules/no-modules')
install.packages("gapminder")
runApp('C:/Users/danny.rasch/Downloads/webinars-master/webinars-master/19-Understanding-modules/no-modules')
runApp('C:/Users/danny.rasch/Downloads/webinars-master/webinars-master/19-Understanding-modules/modules')
